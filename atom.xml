<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fail Better]]></title>
  <link href="http://t3rse.github.io/atom.xml" rel="self"/>
  <link href="http://t3rse.github.io/"/>
  <updated>2014-04-26T17:12:48-05:00</updated>
  <id>http://t3rse.github.io/</id>
  <author>
    <name><![CDATA[David aka t3rse]]></name>
    <email><![CDATA[david.seruyange@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hallo Welt: Octopress Edition]]></title>
    <link href="http://t3rse.github.io/2014/04/21/hello-from-octopress/"/>
    <updated>2014-04-21T22:46:19-05:00</updated>
    <id>http://t3rse.github.io/2014/04/21/hello-from-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been through a lot of blogging engines. My first blog was built on the <a href="http://en.wikipedia.org/wiki/Radio_UserLand">Radio Userland</a> platform, created by Dave Winer who technorati know as the guy (controversially) behind RSS. I&rsquo;ve used <a href="https://dasblog.codeplex.com/">Das Blog</a>, <a href="http://metadeveloper.blogspot.com/">Blogger</a>, and  <a href="http://www.t3rse.com">BlogEngine.net</a>. I&rsquo;ve used <a href="http://da5id.tumblr.com/">Tumblr</a>. I&rsquo;ve even implemented my own lightweight blogging platform in the past. It&rsquo;s interesting how the concept of blogging is so simple but the platforms and tools are anything but. Perhaps it has to do with what I will call the &ldquo;Todo List Software Principle&rdquo; &ndash; the more generalized a problem set, the more variety and churn will exist for technical solutions.</p>

<p>Each platform I&rsquo;ve used had things I liked: Userland dealt with hosting and server configuration while I simply wrote, Das Blog was written with a toolset I understand well, Blogger was painless like Userland but also free, writing my own blog engine helped me understand why it was so difficult and BlogEngine was more modern and sleek than Das Blog.</p>

<p>Each platform also had pain points: Userland wasn&rsquo;t free and ultimately my content was not my own. Das Blog had pain points when new versions of the .NET framework started to come around. Blogger was free but complex if you needed to engage the templates and underlying structure of the engine. BlogEngine&rsquo;s ecosystem seems to have died and comments are a nightmare.</p>

<p>My colleague <a href="http://staxmanade.com/" title="Staxmanade">Staxmanade</a> introduced me to <a href="http://octopress.org/">Octopress</a> as he was in the process of migrating old posts from blogger and writing <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">a series of posts about it</a>. Octopress is an experiment but here is what I like: it strips away a lot of the abstractions from my previous blog engines and allows me to deal with, for the most part, plain text. It also integrates with Github where my content can be hosted for free. Finally it&rsquo;s a programmer&rsquo;s blog engine; the idea of using markdown and code to build my blog is appealing.</p>

<p>Although I&rsquo;m certain <a href="http://octopress.org/">Octopress</a> is not the last blog engine I try my hand at (foreshadowing here) I will be using it in the forthcoming weeks both to follow <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">the Staxmanade series</a> and to learn more about Ruby and statically generated websites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Day Barry Ritholtz Replied]]></title>
    <link href="http://t3rse.github.io/2014/02/23/The-Day-Barry-Ritholtz-Replied/"/>
    <updated>2014-02-23T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2014/02/23/The-Day-Barry-Ritholtz-Replied</id>
    <content type="html"><![CDATA[<p style="line-height: 160%">There’s always a big rush when someone you’ve respected and admired for a long time writes a specific response to your question. I’ve still got an email from 2004 when the author <a href="http://en.wikipedia.org/wiki/Greg_Egan">Greg Egan</a> took a moment to reply to an email I sent him. </p>  <p style="line-height: 160%">Ritholtz, for the small number of friends and my parents who take time to read this blog, is a well known in the world of finance, whose blog <a href="http://www.ritholtz.com/blog/">The Big Picture</a> I’ve followed for many years now. You can read <a href="http://en.wikipedia.org/wiki/Barry_Ritholtz">his Wikipedia entry</a> for more specifics but it suffices to say that offering a direct response to a kid from Nairobi wouldn’t need to be a high priority. But he did and I think quite a few people whose world intersects with mine but not that of the Bloomberg/Investor will benefit from what he sent my way. </p>  <p style="line-height: 160%">First, here is <a href="http://www.ritholtz.com/blog/2014/02/which-investment-behaviors-really-matter-for-individual-investors/#comment-696927">what I wrote in a comment on his blog</a>, asking about what individual investors should do if we’re so demonstrably bad in our decision making: </p>  <blockquote>   <p style="line-height: 200%">So a question then for “Guest Author,” Barry, or any others from the world of the much spited individual investor.</p>    <p style="line-height: 160%">What’s a little guy like me supposed to do given that:</p>    <p style="line-height: 200%">1. I don’t have a large enough portfolio to have an account managed by some clever adviser.      <br />2. I’m not interested in paying a Mutual Fund management fees to be correlated with the market or worse.       <br />3. I’m striving to learn not just from blogs but from different books and <a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=en&amp;cats=economics">free online classes on finance and portfolio management</a>.       <br />4. I’m not the guy from the part of town (ok part of the world, to be honest) where it will all be okay and some inheritance or parental bail out will ever kick in       <br />5. I’ve got 15 years until kids start going to college and 30 until I can max out my social security retirement benefits.</p> </blockquote>  <p style="line-height: 160%">Barry pointed me to the following: </p>  <p></p>  <div style="line-height: 160%">· <a href="http://www.washingtonpost.com/business/10-financial-resolutions-you-can-actually-keep/2013/12/27/8fb431d4-6c0f-11e3-a523-fe73f0ff6b8d_story.html">10 financial resolutions you can actually keep</a></div>  <div style="line-height: 160%">· <a href="http://www.washingtonpost.com/business/ritholtzs-rules-of-investing/2012/09/27/7c662e48-08c4-11e2-a10c-fa5a255a9258_story.html">Ritholtz’s rules of investing</a></div>  <div style="line-height: 160%">· <a href="http://www.washingtonpost.com/business/ritholtzs-rules-of-investing-part-ii/2012/10/12/0dc5965c-119a-11e2-ba83-a7a396e6b2a7_story.html">Ritholtz’s rules of investing (part II)</a></div>  <div style="line-height: 160%">· <a href="http://www.washingtonpost.com/business/investors-10-most-common-mistakes/2012/07/09/gJQAZQh1cW_story.html">Investors’ 10 most common mistakes</a></div>  <p></p>  <p style="line-height: 160%">Thanks Barry, and hopefully someone browsing by will benefit from them as well. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Social Media Hack 2014]]></title>
    <link href="http://t3rse.github.io/2014/02/18/Best-Social-Media-Hack-2014/"/>
    <updated>2014-02-18T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2014/02/18/Best-Social-Media-Hack-2014</id>
    <content type="html"><![CDATA[<p>How to use Google+ as a light weight bookmarks service.</p>  <p>1. Create an empty circle on Google+</p>  <p>2. Use the Google +1 feature to share items in that circle</p>  <p>3. View posts to that circle </p>  <p>Next up: <a href="https://github.com/frosas/google-plus-user-feed">some NodeJS code</a> to generate RSS from it. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Software Engineers Should Read Science Fiction]]></title>
    <link href="http://t3rse.github.io/2014/01/08/Why-Software-Engineers-Should-Read-Science-Fiction/"/>
    <updated>2014-01-08T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2014/01/08/Why-Software-Engineers-Should-Read-Science-Fiction</id>
    <content type="html"><![CDATA[<p style="line-height: 160%">I had a conversation over the holidays with a person who rejected the idea of fiction or writing about things that “didn’t exist.” Although the origin of the discussion was superheroes I thought a good bridge for said person might be Iron Man since his brand of hero more closely resembles Science Fiction than mythology[1]. Unfortunately Science Fiction fell under the umbrella of “things that don’t exist” and was therefore a subject to be ignored. Moments like this are a bit jarring for me; when I have a very basic assumption (Science Fiction is valuable) that is challenged at its root and I have to mentally reconstruct the rationale for so deep seeded a belief that I’ve come to assume is common for most people. </p>  <p style="line-height: 160%">What is fundamental about Science Fiction is that one must imagine things that may not exist within the context of human nature and narrative, things which are constant. Love is a human nature, as much in the time of the written letter as it is in the previously nonexistent age of email. Formative education is a part of all of our lives, whether it is the tragic <a href="http://en.wikipedia.org/wiki/Bildungsroman">bildungsroman</a> of an impoverished boy in <a href="http://www.amazon.com/gp/product/0140435387/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0140435387&amp;linkCode=as2&amp;tag=t3rse-20">Jude the Obscure</a> or the near future when <a href="http://www.nytimes.com/2013/09/15/magazine/the-boy-genius-of-ulan-bator.html">children in impoverished countries learn from MOOCs</a>. </p>  <p style="line-height: 160%">While I would be hard pressed to find any advantage in deliberately trying not to imagine things that don’t exist, a person’s profession does bear heavily on how much of useful such a skill might be perceived. Although they are few and far between, some fields have no bearing on the understanding of technology and people. But for any engineer, and even more so for the software engineer, the entire basis of one’s work is to build things that do not exist. They are wrought from imagination, even the most pedestrian software that must be built. </p>  <p style="line-height: 160%">What catapults an engineer from mere laborer to innovator is the ability to conceive an imagined object of the future in the present. An example of this that I recently read about is the story of <a href="http://en.wikipedia.org/wiki/Edwin_Albert_Link">Edwin Link</a>, the inventor of a flight simulator called the <a href="http://en.wikipedia.org/wiki/Link_Trainer">Link Trainer</a> in the 1920s. It’s hard to imagine in the present but fatality rates for prospective pilots in that age were shocking. Link had an engineer’s mind and came up with the concept of a simulator (he built them from parts used by his family’s organ manufacturing company) that would allow a learner to practice on the ground, in a safe environment before taking to the air. It seems so obvious when we look in hindsight but Link had to work hard for many years to gain acceptance that his contraption would be of any use. He persevered because he could conceive of a device of the future in the present and how it would be valuable. </p>  <p style="line-height: 160%">In the world of software, where the constraints of traditional engineering are loosened[2], the ability to think in a future against typical convention wields tremendous power. There are many precedents for this from the innovations in places like the famed Augmentation Research Center at Stanford Research Institute[3] to more recent evolutions of source control management[4]. In each case the engineer must stretch his or her imagination into the future and pull us into it from the present. </p>  <p style="line-height: 160%">Writers of Science Fiction are aware of this implication in their work. Not too long ago Neal Stephenson <a href="http://www.worldpolicy.org/journal/fall2011/innovation-starvation">made the case</a> for Science Fiction writers to be deliberate in their power to inspire; put colloquially on <a href="http://io9.com/5846707/science-fiction-writers-have-a-job-and-its-time-to-do-it-says-neal-stephenson">io9.com</a>: </p>  <blockquote>   <p style="line-height: 160%">“<strong>SF needs to stop mucking around with steampunk and dystopia, and start making decent roadmaps for a future where we all want to live</strong>.”</p> </blockquote>  <p style="line-height: 160%">All of this to say that it is possible to live in a world where there is no thought of the future, in a continuous reaction to what the world presents to us. It is possible to ignore science, the human narrative, and the future things which don’t exist. When I think of this possibility, I think of a very dark and drab place. But this is not a world for an engineer, especially not a software engineer. We have to build things which don’t exist. And the difference between the engineer who is perfectly contented to rehash a precedent and an Elon Musk, our present day Tony Stark[5], is that Musk is immersed in <a href="http://www.businessinsider.com/elon-musk-wants-to-build-hyperloop-model-2013-11">hyperloops</a>, <a href="http://www.teslamotors.com/">mass produced electric vehicles</a>, <a href="http://www.spacex.com/">space infrastructure</a>, and <a href="http://www.solarcity.com/">commoditized solar energy</a>; a future world that is being made to exist.</p>  <p>&#160;</p>  <p>[1] I personally believe that myth is important as well; the definition of “<em>ideology in narrative form</em>” implies that in understanding myth, one can understand how a person thinks. In the case of super heroes, whether they are Greek titans like <a href="http://en.wikipedia.org/wiki/Prometheus">Prometheus</a> or as American as <a href="http://en.wikipedia.org/wiki/Captain_america">Steve Rogers</a>, they tell us about our deeper values.</p>  <p>[2] An in depth exploration is Jack Reeves excellent essay “<a href="http://www.developerdotstar.com/mag/articles/reeves_design.html">What is Software Design?</a>”</p>  <p>[3] Case in point: the “<a href="http://sloan.stanford.edu/mousesite/1968Demo.html">mother of all demos</a>” done by Douglas Engelbart in 1968.</p>  <p>[4] As a person who went from centralized source control (SVN) to distributed (GIT) and back, the latter has hacked my brain with concepts I didn’t “get” before I experienced them. Now it’s hard going back.</p>  <p>[5] <a href="http://www.youtube.com/watch?v=OYrxSQ_Y2Iw">Tony Stark is Iron Man</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Startup Engineering Reviewed]]></title>
    <link href="http://t3rse.github.io/2013/09/17/Startup-Engineering-Reviewed/"/>
    <updated>2013-09-17T00:00:00-05:00</updated>
    <id>http://t3rse.github.io/2013/09/17/Startup-Engineering-Reviewed</id>
    <content type="html"><![CDATA[<p>I just completed <a href="https://www.coursera.org/course/startup">Startup Engineering</a>, a Stanford <a href="http://en.wikipedia.org/wiki/MOOC">MOOC</a> offered through <a href="https://www.coursera.org/">Coursera</a>. There are two broad themes in the course: one that is technical and another that is philosophical. </p>  <p><strong>Technical</strong></p>  <p>Although the course assumes limited technical knowledge, it would be difficult for a person without at least moderate technical skills to complete this portion with any depth of understanding. A brief summary of topics covered demonstrates this: </p>  <p>Ubuntu Linux   <br />AWS    <br />Heroku     <br />Bash     <br />Emacs     <br />Git     <br />Github    <br />Javascript     <br />Coffeescript     <br />Node.js     <br />Express     <br />Sequelize     <br />PostgreSQL     <br />JSON    <br />Chrome    <br />Bootstrap     <br />Mobile&#160; <br />HTML5</p>  <p>Any one of those topics could be a lengthy course on its own and, even though the course is designed more for exposure, the depth of the subject matter can be overwhelming. But for those who persevered the reward was a strong foundation along with reference materials (discussed later under Reference Material) to revisit.</p>  <p><strong>Philosophical</strong></p>  <p>Beyond technical knowledge the course offers practical direction on how to think about and execute startup concepts. Two things make this work exceptionally well: first, the depth provided in written lectures (discussed later under Reference Material), and second the instructor, <a href="https://www.coursera.org/instructor/balajis">Balaji Srinivasan</a> whose track record and experiences provide the gravitas that separates this course material from the type of people who post inspirational startup drivel with hopes of getting posted to Hacker News. </p>  <p>Perhaps the most fascinating thing about the philosophy arc of the course comes from its origin: it was initially offered by <a href="http://en.wikipedia.org/wiki/Peter_thiel">Peter Thiel</a> as CS183 at Stanford. Thiel is well known as an avowed libertarian, and Srinivasan, beyond describing the course as a “spiritual sequel” to its initial offering, continues along these themes providing credible evidence in support of this political and economic philosophy. One lecture in particular, concerning regulation, makes a devastating case against how interventions impede innovation and business[1]. </p>  <p><strong>Reference Material</strong></p>  <p>Most MOOC offerings involve video lectures with some sparse reference materials. The videos are well produced and it’s easy to watch, pause, and rewind. Startup Engineering was vastly different: all of the lectures were written in long form and although there were videos Srinivasan essentially skims through the written material. Some people wanted more screen time for the instructor but this was one of the best aspects of the course for me; I ended up with a book of lecture material on my tablet to consume at the speed of my designation. The lectures are dense: I just counted 130 external links/references in the first provided lecture alone. The lectures that involve tasks performed on AWS were straightforward and methodical. I cannot emphasize enough how valuable these were and I will probably use them to start some of the more technical tasks again from scratch to uncover what I might have missed. One last thing that deserves mention are the guest lectures delivered by founders of some more well known startups. It was the proverbial icing on the cake. </p>  <p><strong>Final Thoughts</strong></p>  <p>I would recommend Startup Engineering to anyone interested in either starting a technology company or to those who simply want a broad overview of the technologies and engineering of web applications. Although the course is officially past its timeframe it’s <a href="https://www.coursera.org/course/startup">still available for sign up</a> as I’m writing this blog entry. I would recommend waiting for the next offering and participating in the competition among students for crowd sourcing a business idea. </p>  <p>&#160;</p>  <p>[1] I’m not “libertarian” myself although I do think all of the ideas and arguments presented in the course should be taken seriously. This wasn’t the crazy uncle on Medicare and Social Security (irony intended) venting personal frustrations on “The Government,” it was well thought out, evidence-based reasoning promoting libertarian thinking. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking Startups]]></title>
    <link href="http://t3rse.github.io/2013/08/17/Rethinking-Startups/"/>
    <updated>2013-08-17T00:00:00-05:00</updated>
    <id>http://t3rse.github.io/2013/08/17/Rethinking-Startups</id>
    <content type="html"><![CDATA[<p style="line-height: 180%">I’ve been enjoying my current class, <a href="https://www.coursera.org/course/startup">Startup Engineering</a>, from <a href="https://www.coursera.org/">Coursera</a>. My own fascination for startup culture preceded the “Dot Com” era; I always admired people like Nolan Bushnell[1], Steve Jobs[2], and Bill Gates[3]. But I came of age during “<a href="http://en.wikipedia.org/wiki/Tech_bubble">The Bubble</a>” and hearing all of the sensational stories made me excited with what I might be able to become a part of as a young technologist. Even after the party ended and it seemed so obvious that most startup emperors had no clothes, I was still under the spell of people like Paul Graham whose <a href="http://paulgraham.com/articles.html">essays</a> and work at <a href="http://ycombinator.com/">YCombinator</a>[4] have influenced so many of us in our thinking about building businesses. </p>  <p style="line-height: 180%">One of the key points made by the Startup Engineering professor, <a href="https://www.coursera.org/instructor/balajis">Balaji Srinivasan</a>, is that there is a difference between a “small business” and a “startup.” The major difference has to do with the size of the market. According to the lecture notes: “<strong>Startups Must Exhibit Economies of Scale</strong>.” </p>  <p style="line-height: 180%">When I think about the companies I admire I realize that many don’t have enormous markets in a traditional sense[5]. I find myself admiring companies like <a href="http://www.wolfram.com/">Wolfram Research</a> for products like <a href="http://www.wolframalpha.com/?fp=right">Wolfram Alpha</a> or a gaming company like <a href="http://www.paradoxplaza.com/">Paradox Interactive</a> for publishing niche titles well known for their sophistication and obsessive community rather than mass market appeal. Both, if I’m not mistaken, are privately held which means that while neither is “small,” neither has to kowtow to short term demands of shareholders. </p>  <p style="line-height: 180%">Although I’m in learning mode at present I hope one day to build my own business selling software. It is, after all, the reason I took the course. But from a philosophical and temperamental side, this has helped me clarify my interests in something smaller than a conventional startup. I would rather take on an ambitious goal[6] in a small market than making a conventional concept “mainstream.” Worse yet, I wouldn’t want to build a sand castle product that is just designed to get a buck rather than make an impact. </p>  <p style="line-height: 180%">&#160;</p>  <p style="line-height: 180%">[1] <a href="http://www.amazon.com/gp/product/0970475500/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0970475500&amp;linkCode=as2&amp;tag=t3rse-20">The First Quarter : A 25-year History of Video Games</a><img style="border-top-style: none !important; border-left-style: none !important; border-bottom-style: none !important; border-right-style: none !important; margin: 0px" border="0" alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0970475500" width="1" height="1" /> is a great history of early gaming.&#160; It was later edited and republished as <a href="http://www.amazon.com/gp/product/0761536434/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0761536434&amp;linkCode=as2&amp;tag=t3rse-20">The Ultimate History of Video Games: From Pong to Pokemon&#8211;The Story Behind the Craze That Touched Our Lives and Changed the World</a><img style="border-top-style: none !important; border-left-style: none !important; border-bottom-style: none !important; border-right-style: none !important; margin: 0px" border="0" alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0761536434" width="1" height="1" /> but I&#8217;ve only personally read the former. </p>  <p style="line-height: 180%">[2] <a href="http://www.folklore.org/index.py">Folklore.org</a> is a great resource for stories around the early days of Apple and the building of the original Macintosh. </p>  <p style="line-height: 180%">[3] Steve Jobs, Bill Gates, and many others are chronicled in Robert Cringely’s excellent book <a href="http://www.amazon.com/gp/product/0887308554/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0887308554&amp;linkCode=as2&amp;tag=t3rse-20">Accidental Empires: How the Boys of Silicon Valley Make Their Millions, Battle Foreign Competition, and Still Can&#8217;t Get a Date</a><img style="border-top-style: none !important; border-left-style: none !important; border-bottom-style: none !important; border-right-style: none !important; margin: 0px" border="0" alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0887308554" width="1" height="1" />.&#160; </p>  <p style="line-height: 180%">[4] <a href="http://paulgraham.com/invtrend.html">According to Graham</a>, the valuation of companies incubated at YCombinator as of June 2013 was $11.7 billion.&#160; </p>  <p style="line-height: 180%">[5] By this I mean a lot of people. I’m aware of companies with a smaller market that achieve their revenues with higher prices.</p>  <p style="line-height: 180%">[6] Like <a href="http://en.wikipedia.org/wiki/Johan_Andersson_(game_programmer)">Johan Andersson’s</a>: “to create believable worlds.”</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving Forward, Backward]]></title>
    <link href="http://t3rse.github.io/2013/07/18/Moving-Forward-Backward/"/>
    <updated>2013-07-18T00:00:00-05:00</updated>
    <id>http://t3rse.github.io/2013/07/18/Moving-Forward-Backward</id>
    <content type="html"><![CDATA[<p style="line-height: 160%">I never thought I’d find myself saying it but my next computer is going to be a classic desktop machine; a “tower” as some of the gray bearded veterans of the “Build Your Own PC” era used to say. Although some people have preferred this type of machine my last 15 years (20 if you want to throw in college) have been spent on laptops. It’s been a practical decision: as a student I needed mobility to work in the library or in a class room, as a newly minted professional I had jobs that involved a lot of travel. And I liked working in coffee shops.</p>  <p style="line-height: 160%">Moving to a desktop feels in many ways like moving backward. As everyone and everything seems to get more “mobile first,” as there is more and more competition to build a smaller laptop with more battery life, it would seem like the action of a misty eyed classicist; the kind of guy who restores cars or listens to music from the 60s for the look and feel of a bygone era. </p>  <p style="line-height: 160%">But it’s the future that has moved me backward. Last year after <a href="http://www.t3rse.com/post/2012/12/31/The-Tablet-Wars-A-Personal-Account.aspx" target="_blank">much agonizing</a> I bought myself a Nexus 7 and the effect was that it became more and more of a rare need to move my laptop. The things I did – checking email, reading internets, watching screencasts – all not only were available on my tablet, but they were in many ways better[1]. </p>  <p style="line-height: 160%">As I come up on my 3 or so year upgrade cycle I’ve realized that in terms of bang for your buck, building a desktop machine is not only more economical, it comes with more power. Power is something I’ve always wanted but as I find myself more and more drawn to a “virtualize everything” approach to operating systems, it’s something I find myself needing. In a perfect world I run a virtualized OS for a work machine, another one for personal use, and several experimental VMs for running prerelease software and Linux[2]. These are all things I do with my laptop but there are better, cheaper options for optimizing CPU and memory on a desktop machine. </p>  <p style="line-height: 160%">The one element of my life that is perhaps a tipping point is that I no longer travel for work. This is the one element that might have continued the appeal for the powerful laptop I could move around with but as a remote worker who needs his home office for better bandwidth and privacy than could be achieved at a coffee house or library, it’s a chapter closed. Even with the most robust tablets out there, it seems like any serious undertaking involves a more traditional laptop or desktop computer. When my out of the ordinary travel or mobile scenarios show up I’ll still have one of my old laptops to fall back upon.</p>  <p style="line-height: 160%">I have to wonder how many people like me still buy laptops by force of habit but wind up doing most “mobile” tasks on a tablet or a phone. I also wonder if, once chained to a desktop, I’ll start to discover all sorts of scenarios when it would have been convenient to have a laptop instead. </p>  <p>&#160;</p>  <p>[1] Fewer distractions on a single purpose screen, apps like <a href="http://www.instapaper.com/" target="_blank">Instapaper</a>, being able to multitask with real life (watching my toddler).</p>  <p>[2] Ubuntu for the most part although I realized a big reason I wasn’t doing any Windows 8 development was because I didn’t have the time or inclination to try to merge my heavily Windows 7 life with something new. It would have been easier to learn WinRT in parallel on a VM.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Gladwell on the IDE: Emacs vs Visual Studio]]></title>
    <link href="http://t3rse.github.io/2013/07/07/Going-Gladwell-on-the-IDE-Emacs-vs-Visual-Studio/"/>
    <updated>2013-07-07T00:00:00-05:00</updated>
    <id>http://t3rse.github.io/2013/07/07/Going-Gladwell-on-the-IDE-Emacs-vs-Visual-Studio</id>
    <content type="html"><![CDATA[<p style="line-height: 160%">Are Vim and Emacs as powerful as their legend would have it or do the “lesser” developers, <a href="http://www.codinghorror.com/blog/2007/11/mort-elvis-einstein-and-you.html" target="_blank">the “Morts”</a> of the world, spend less time focused on learning their tools at the expense of learning their problem domain? </p>  <p style="line-height: 160%">I read an <a href="http://briancarper.net/blog/534/emacs-isnt-for-everyone" target="_blank">old blog post</a> from Brian Carper about learning Emacs recently: </p>  <blockquote>   <p style="line-height: 200%">Emacs isn&#8217;t difficult to learn. Not in the sense of requiring skill or cleverness. It is however extremely painful to learn. I think there&#8217;s a difference.</p>    <p style="line-height: 200%">The key word is tedium. Learning Emacs is a long process of rote memorization and repetition of commands until they become muscle memory. If you&#8217;re smart enough to write programs, you can learn Emacs. You just have to keep dumping time into the task until you become comfortable.</p> </blockquote>  <p style="line-height: 160%">I’m willing to assume Brian is a clever guy; the fact that he <a href="http://www.clojurebook.com/" target="_blank">writes books about Clojure</a> is like a dog whistle for intelligent programmers. How long does it take? </p>  <blockquote>   <p style="line-height: 200%">Well, it took me <em>over a year</em> to be able to sit down at Emacs and use it fluidly for long periods of time without tripping over the editor.</p> </blockquote>  <p style="line-height: 160%">So picking up on this specific time frame here is my hypothesis: perhaps it’s not something so special about the capabilities of an Emacs or a Vim – perhaps it’s this timeframe that makes for the types of productivity associated with these tools rather than the tools themselves? </p>  <p style="line-height: 160%">A different way to think about it is to think of how many people using Visual Studio know more than a handful of the many shortcuts? How many a Mort really uses the Command Window to automate or interact with the tool? It’s always fun and enlightening to watch a person like Scott Hanselman using Visual Studio (how many talks have you been to when you picked up some keyboard shortcut that was your biggest takeaway?). It’s even more of an eye opener to see what is possible with the power of extensions such as Mads Kristensen’s <a href="http://visualstudiogallery.msdn.microsoft.com/6ed4c78f-a23e-49ad-b5fd-369af0c2107f" target="_blank">Web Essentials</a>. </p>  <p style="line-height: 160%">Some closing thoughts on this open ended assertion [to mitigate the forthcoming beat down in comments?]: </p>  <p style="line-height: 160%">1.&#160; <br />I will be learning a little Emacs as a part of a MOOC I’m enrolled in, <a href="https://www.coursera.org/course/startup" target="_blank">Startup Engineering</a>. I hope to write a follow up post but if you do find my reasoning faulty for a lack of Emacs or Vim experience, what do you recommend I look for in the painful process of getting going?</p>  <p style="line-height: 160%">2.    <br />Although I have used Visual Studio on a nearly daily basis for a long time now. I have not, however, spent more than a few minutes in a concerted effort to learn <a href="http://msdn.microsoft.com/en-us/library/vstudio/da5kh0wa.aspx" target="_blank">keyboard shortcuts</a> or <a href="http://msdn.microsoft.com/en-us/library/vstudio/80493a3w.aspx" target="_blank">add-in programming</a>. Any recommendations on getting better with the IDE at hand are welcome.</p>  <p style="line-height: 160%">3.    <br />When Visual Studio is too large of a hammer, I use Notepad++. If you have any recommendations about Notepad++ or any other text editors (yes, I know Sublime is very popular these days) I’d love to catalog it from the comments. </p>  <p>Your thoughts?</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paean to RSS]]></title>
    <link href="http://t3rse.github.io/2013/03/14/Paean-To-RSS/"/>
    <updated>2013-03-14T00:00:00-05:00</updated>
    <id>http://t3rse.github.io/2013/03/14/Paean-To-RSS</id>
    <content type="html"><![CDATA[<p>In the wake of the death of Google Reader I was planning to write an ode to RSS and how important it is for the web but Dieter Bohn has done the job in his article on The Verge, “<a href="http://www.theverge.com/2013/3/14/4105006/why-rss-still-matters" target="_blank">Why RSS still matters</a>.”</p>  <p>In short I’m <em>hopeful</em> because something that valuable and so passionately used won’t just disappear. This represents an opportunity for all of us who consider ourselves innovators to build something to fill the gap without Google Reader. At present I’m kicking the tires of <a href="http://www.newsblur.com/" target="_blank">NewsBlur</a> but here are some things I’d love to see in the more evolved RSS clients people will start building: </p>  <p>1. Tools for long form reading – similar to <a href="http://www.instapaper.com" target="_blank">Instapaper</a> which I use for deferred but eventual reading. </p>  <p>2. Shared content from feeds, perhaps also syndicated with annotations. Take the social network out of the walled garden and make it open. </p>  <p>3. Tools for curating and annotating syndicated content. </p>  <p>4. Tools for feeds with specialized content like video blogs or podcasts. </p>  <p>5. Integrated Groupware: things like long form chat and the ability to post comments in an environment that makes them visible to some group of people. The big trick is to avoid the walled in social network; we have too many of those. </p>  <p>Any other ideas? </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lego and Clay: States of Mind]]></title>
    <link href="http://t3rse.github.io/2013/03/03/Lego-and-Clay-States-of-Mind/"/>
    <updated>2013-03-03T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2013/03/03/Lego-and-Clay-States-of-Mind</id>
    <content type="html"><![CDATA[<p><font size="3"><strong>There’s An App For That</strong></font></p>  <p style="line-height: 180%">Thousands of apps, native and web based, litter the consumer facing stores of big platform vendors, each with some story about how they will make your life better. Even if your problem domain is something as obscure as surviving an earthquake, someone has written <a href="http://news.cnet.com/8301-17938_105-10438121-1.html" target="_blank">a simple app with the singular purpose of keeping you alive</a>. </p>  <p style="line-height: 180%">What’s interesting to me in a world proliferated by apps is how we are conditioned now to look for boxes to fill, buttons to push, and single domain user interfaces in order to get things done. Whether it’s on the web or a mobile device, this is the paradigm we seem to find everywhere. </p>  <p><strong><font size="3">Lego and Clay</font></strong></p>  <p style="line-height: 180%">Many moons ago, when Silverlight was still fresh and bright in the eyes of the Microsoft developer crowd, I attended a talk given by <a href="http://www.rickbarraza.com/" target="_blank">Rick Barraza</a> on animation. He was attempting to walk those of us newer to Silverlight through his thought process and how he developed some of the showcase pieces of software that his then employer, Cynergy, had developed for Microsoft. As he showed attendees his process of manually animating an effect of falling snow, he discussed a paradigm analogous to working with clay and contrasted it with how many of us in the Microsoft sphere have become accustomed to controls and user interface building blocks to put things together, a more Lego oriented perspective on software development. From an interview: </p>  <p>&#160;</p>  <blockquote>   <p style="line-height: 180%">There are two types of personalities in this space. Those that like solving problems using the Lego method: snapping predictable and scalable objects together. And those who like solving problems with clay: loose and messy, but with a high level of customization and intricacy in the finished product. The tension between those two camps and their evolution, that cross pollination of ideas and techniques, should create some compelling experiences. </p> </blockquote>  <p style="line-height: 180%">I will admit I was one of those developers who was uneasy and frustrated by the lack of snap in controls. Even though things <a href="http://silverlight.codeplex.com/" target="_blank">got better</a> as Silverlight evolved, the idea of an evolving framework of prebuilt building blocks was something I had a hard time letting go of. Even if the outcome was battleship gray, I could build things quickly and without the type of detail and ownership I would encounter by making everything from scratch. </p>  <p><font size="3"><strong>Apps Are Legos</strong></font></p>  <p style="line-height: 180%">Apps fit the Lego mindset – they build a layer of abstraction on top of the task at hand, hoping to “automate” some of the structure around it. The goal of app designers (besides the money) is that this abstraction makes for a “solved problem” – that people would see effort on their part as reinventing the wheel.</p>  <p style="line-height: 180%">For example, if you have a newborn, one of the things they have you do in the first few days is track when the baby eats and when it poops. Since this problem predates the dawn of the mobile era people have usually kept a notebook with one column where you wrote the activity, one where you wrote the time and one column with “notes” for anything extra. These days, however, there are apps to simplify that with push buttons that indicate the activity, automatically recording the details. Why bother with the notepad, having to find a pen, or your inconsistent notations that the nurse has a hard time reading? Just push a button!</p>  <p style="line-height: 180%">If you are happy living in an abstraction this makes perfect sense. Most app design doesn’t anticipate too much around a problem and focuses on a specific task. Some of the more subtle and clever designs steer users in a particular direction or eliminate things the app designer finds unnecessary. It all works great as long as there is no edge case or unexpected element within the problem domain. Continuing with the idea of newborns our imaginary app that tracked eat, sleep, and poop would work well until the doctor noticed something and asked you to note something special along with the regular activity (e.g. every time little Jonny’s poop is green, write out how long it was since he had eaten!). </p>  <p><font size="3"><strong>Clay, Sculpture</strong></font></p>  <p style="line-height: 180%">For those who dislike snap-in pieces or want something completely unique, the blank piece of paper offers utmost freedom to solve problems as diverse as taking care of a newborn to planning a writing schedule. In a digitized environment clay comes primarily in the form of text editing or the slightly more evolved spreadsheets. </p>  <p style="line-height: 180%">I had a friend who worked for a defense contractor a while back who, although he couldn’t tell me much about his day job, alluded to being an engineer on a team designing missile defense systems. When I asked what kind of tools they used for something like that, thinking of something very “advanced” and esoteric, he just replied in earnest: a lot of Excel. At the time I thought he was being discrete but these days I don’t have a hard time believing it especially if he had to do a lot of mathematical models. I’ve also started to pay attention to the world of finance and the spreadsheet is the <em>lingua franca</em> of that world whether you’re doing an asset allocation model or some form of quantitative analysis. </p>  <p style="line-height: 180%">It takes no stretch of the imagination to visualize a spreadsheet that tracks events for a newborn. But because a spreadsheet is like clay designing it would involve some messiness – and automating things would require a bit more effort, the type which would send most people back to the Lego jar. </p>  <p style="line-height: 180%">The sculpting of this spreadsheet would also become a reflection of the sculptor. It could be a cringe worthy effort of repetition, manual entry, and strange conventions or it could be something singular: a small, elegant, and beautiful reflection of how they chose to solve the problem. </p>  <p><font size="3"><strong>Predisposition, Balance</strong></font></p>  <p style="line-height: 180%">As with most things it is tempting to be lured into a false dichotomy of Lego versus Clay. It seems as though so many other facets of life are polluted with characterizations of polar opposites where one has to pick a side. Artists and designers argue about form versus function. Our politics are polluted with the arguments that are liberal or conservative. Personality types are misconstrued as either extroverted or introverted. Even my petty world of comic book collecting has the perennial arguments of Marvel versus DC (Marvel of course). </p>  <p style="line-height: 180%">Rather than picking a side or calling one bad, I think it’s more constructive to do a self diagnosis of one’s predispositions and then try to find a point at which the two approaches can inform each other. I’ve seen amazing work from those that operate with Lego; from Alice Finch’s real world <a href="http://www.brothers-brick.com/2013/02/26/alice-finch-builds-massive-lego-hogwarts-from-400000-bricks/" target="_blank">recreation of Hogwarts Castle</a> to the type of apps that make the heart sing. At the same time, it’s hard to deny the beauty and power of sculpture; who wouldn’t stop for Cordier’s <a href="http://www.flickriver.com/photos/tags/charleshenrijosephcordier/interesting/" target="_blank">Bust of an African Woman</a>? </p>  <p style="line-height: 180%">My observation is that for those who are oriented toward clay, the danger lies in being overwrought or too singular; something that is molded so endlessly that it looses its sense of purpose or something that is so unique to a circumstance that it is never again useful. For those oriented toward Lego the danger seems to come in living too much inside of an abstraction and becoming unable to see around it. </p>  <p><font size="3"><strong>It Never Occurred To Me</strong></font></p>  <p style="line-height: 180%">In general, it seems as though as a general culture our focus is driven by a mix of commercial forces and laziness to be driven toward the Lego mindset; to always look for the “right” prepackaged software that meets our needs. I know I’m a Lego person, especially when it comes to simple problems that are common. But recently I’ve been thinking about how little I actually know about Excel, and how so many app oriented problems would be trivial with a spreadsheet. For example, I used a 37Signals app for manipulating a “To Do” list for my reading. How difficult would this be in Excel? Why did it never occur to me to simply make a spreadsheet?</p>  <p><img style="margin: 0px 10px 0px 0px; float: none" src="http://www.seruyange.com/images/TadaList.jpg" /></p>  <p style="line-height: 180%">In the question of balance, it is important that when decisions are made, it’s with a cognizance of alternatives – choosing from the different paths that can be taken. I have personally been too App focused, too dependent on prepackaged solutions whether it’s To Do list software or project management.&#160; What would happen if I started trying to solve these problems with clay? What would happen if, rather than color by number, I began to paint? </p>  <p><font size="3"><strong>Deliberate Selection</strong></font></p>  <p style="line-height: 180%">Apps are useful. So too is the mindset behind them; I’ve learned that most things that become mainstream do so not because people are sheep but because they are designed well enough to accommodate needs. It is also wasteful to focus on our own implementations to solved problems when this serves as a distraction to a larger problem set that we are trying to solve; back to babies, I know that when my children were born my focus was on spending time with them, helping my wife, getting sleep, and maintaining my sanity. Creating a perfect notebook or spreadsheet to track the baby’s activity was less than a passing thought in my mind for the right reasons. </p>  <p style="line-height: 180%">But there are things that warrant the attention. Things that I do every day, things that are core to my job and profession that ought to become candidates for a conscious choice of an out of the box solution or something that is customized and flexible. The pre-made software may do the trick but at this point it seems to me that the Lego oriented sphere of my thinking should inform the part that tends toward Clay, the part of my process where I think about how I would solve the problem myself if it became necessary. </p>  <p style="line-height: 180%">Joel Spolsky <a href="http://www.joelonsoftware.com/articles/fog0000000007.html" target="_blank">wrote</a> a long time ago about most of the time it’s not a good idea to reinvent the wheel but that it’s something you should do when you are operating on the core of your business, platform, or goal. This is debatable and I’m sure any reader would have an opinion (I’ve seen attempts at this become poor, feature-starved shadows of what is open and freely available) but on the question of choosing a full featured software or App that solves our problems by putting us into someone else’s abstraction versus the sweat equity of building something ourselves and really thinking through our needs, I think it’s worth the type of consideration that makes it a deliberate choice with an awareness of the benefits and limitations that we impose upon ourselves. Despite the generality that none of us is a unique and beautiful snowflake we all do come with our own edge cases. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, Dropbox, and Collaborators on Windows]]></title>
    <link href="http://t3rse.github.io/2013/02/05/Git-Dropbox-Collaborators-on-Windows/"/>
    <updated>2013-02-05T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2013/02/05/Git-Dropbox-Collaborators-on-Windows</id>
    <content type="html"><![CDATA[<p>First and foremost the full disclosure:<strong> I’m new to Git</strong>. Although I’d <a href="https://github.com/t3rse" target="_blank">used Github</a> for a few of my errant thoughts/projects, it was for the most part just copying commands without a deep understanding of the benefits of distributed source control. </p>  <p>Today a light clicked on when I was finally able to set up a Dropbox repository and share it out with some collaborators. First, here are the steps I followed, adapted from an old post by <a href="http://rogerstringer.com/2012/04/16/using-dropbox-as-a-git-repository/" target="_blank">Roger Stringer</a>.</p>  <p><font size="4">Setting Up Your Remote Repository On DropBox</font></p>  <p>1. Get Dropbox, create your folder. (If you don’t have a Dropbox account, please use <a href="http://db.tt/5HsjFfwV" target="_blank">this affiliate link</a> which will give me more space). </p>  <p>2. Create a “bare” repository there: </p>  <ul>   <li>Start Git Bash in the folder and use the following commands: </li> </ul>  <pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git init –-bare</pre>

<ul>
  <li>Once you’ve created your empty repository you’ll see the repository metadata which is ok. </li>
</ul>

<p><font size="4"></font></p>

<p><font size="4">Setting Up Your Local Repository, Pushing To Dropbox</font></p>

<p>Now that you have your DropBox folder set up to be a remote repository, you can set up your working folder. I already have a Visual Studio project with some files in it so I just started a Git Bash in that folder. </p>

<p>1. Double check that you’ve got a <strong><a href="https://github.com/github/gitignore/blob/master/VisualStudio.gitignore" target="_blank">.gitignore file</a></strong> that is configured for Visual Studio or <a href="https://github.com/github/gitignore" target="_blank">whatever</a> project files you’d like to ignore.</p>

<p>2. Create the local git repository with the following: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git init .</pre>

<p>
  <br />3. Now add all your files to be tracked by the local repository with the following: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git add --all</pre>

<p>
  <br />4. Commit the changes you made by adding all those files: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git commit –m “Added initial files for git tracking”</pre>

<p>
  <br />5. Now set up your remote repository as the previously created “bare” repository in DropBox. Here is the small divergence from the original article since Windows is the file system: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git remote add origin /c/users/curufin/dropbox/gitbox</pre>

<p>
  <br />In the above: </p>

<ul>
  <li><em>origin</em> represents the name of the remote repository </li>

  <li>In the local path, <em>curufin</em> is my username on windows and gitbox is the name of the folder I made. </li>
</ul>

<p>6. Push your files to the remote dropbox repository: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git push origin master</pre>

<p><font size="4"></font></p>

<p><font size="4">Collaborators and Others Wishing to Connect to Your Repository</font></p>

<p>The point behind using Dropbox is to have a synced space for your remote repository but without hosting and some of the other frictions or sharing elsewhere. Here are the steps to get your collaborators onboard: </p>

<p>1. Share your Dropbox folder with them. They will need Dropbox accounts, of course. </p>

<p>2. Once the folder is shared and propagated, they will need to make an empty repository in the folder from which they plan to work. The command, reiterated from above is: </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git init .</pre>

<p>
  <br />3. The next step is to point to the remote repository. The “remote” repository is really the synced Dropbox folder and the idea is that Dropbox will do the heavy lifting in terms of keeping the folders synced. </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git clone /c/users/celebrimbor/dropbox/gitbox</pre>

<p>
  <br />In the above: </p>

<ul>
  <li>In the local path, <em>celebrimbor</em> is the username on windows. </li>
</ul>

<p>4. The next step is to do a pull from the remote repository. </p>

<pre style="padding-bottom: 3px; background-color: #333; padding-left: 3px; padding-right: 3px; color: #ccc; padding-top: 3px">git pull origin</pre>

<p>
  <br />5. At this point they should be able to inspect the project files in their local folder and work on them using git to manage their versions. </p>

<p><font size="4">The Future Is Distributed</font></p>

<p>I opened the article by admitting I am new to Git. In terms of serious projects, I would only consider the last month or so as legitimate experience. I’ve also struggled, as a person relatively experienced with Subversion, with the gestalt of Git. </p>

<p>However what the above shows is how useful it is to generate repositories that live in local or remote file systems and how much flexibility there is in being able to take advantage of existing protocols and structures that do the sharing on our behalf. Not only is that remote repository so easily accessible, it’s logically separate from my local repository to which I can make changes and commit to my heart’s content. There are probably other niceties but the last positive I noticed was that Git was tracking my changes with my default user/email configuration. There is a way to reset this but it makes it easy to differentiate my changes from any collaborators. If you add on the ability to do in place branching this is quite a powerful environment. </p>

<p>One final note: of course the above is probably not a great idea for a full fledged project (or is it? maybe someone with experience can comment… ). The project I work on is taking advantage of <a href="http://www.github.com" target="_blank">Github</a> and especially after using their tools to hunt down (blame button!) some issues I fully appreciate their business model. One other plug is for my personal project hosting provider, <a href="http://www.projectlocker.com/" target="_blank">ProjectLocker</a>. They host Git repositories and after 2+ years with them as a primarily Subversion customer, I’m happy. I’ve started my first Git repository and the process is straightforward. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With Steve Jobs]]></title>
    <link href="http://t3rse.github.io/2013/01/23/Working-with-Steve-Jobs/"/>
    <updated>2013-01-23T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2013/01/23/Working-with-Steve-Jobs</id>
    <content type="html"><![CDATA[<blockquote>   <p>&#8230; it wasn&#8217;t magic, it was hard work, thoughtful design, and constant iteration.</p> </blockquote>  <p>Glenn Reid, who worked on iMovie and iPhoto <a href="http://inventor-labs.com/blog/2011/10/12/what-its-really-like-working-with-steve-jobs.html" target="_blank">recollects</a>. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next Big Language 2013]]></title>
    <link href="http://t3rse.github.io/2013/01/14/Next-Big-Language-2013/"/>
    <updated>2013-01-14T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2013/01/14/Next-Big-Language-2013</id>
    <content type="html"><![CDATA[<p>One of the difficulties I have in writing blog posts is feeling as though I lack the ability to say something conclusive, some wit or wisdom that can wrap up my thoughts in a clever, prosaic bow. Perhaps it was all those years of papers that needed to be written with an intro, body, and conclusion. </p>  <p>But on the question of <em>Next Big Language</em>[1] (in a personal sense) I admit I’ve been tossed to and fro over the years in my attempts to improve as a programmer. Many people I admire recommend trying to learn a new programming language each year. I’ve pursued this model or something like it, using the aspirational punch of New Year’s day to resolve to take up something new. As the year develops I move from basic syntax to contrived problems to some form of personal project. By the end of the year I’m starting to lurk within the community, reading the more heavily trafficked blogs and checking on events and conferences (never going of course). Given my propensity to look for heroes, I’ll seek out the more vocal thought leaders, all of whom have used said language and availed themselves of the community… for years. </p>  <p>The irony is that in my attempt to improve as a programmer I reach the fledgling stages of using a new language and then abandon it; the year ends and I’m fatigued by overcoming the really hard transition from understanding syntax to understanding idioms and techniques that make the language really different. </p>  <p>My team is switching to <a href="http://en.wikipedia.org/wiki/Git_(software)" target="_blank">Git</a> so last week I dug up the <a href="http://www.youtube.com/watch?v=4XpnKHJAok8" target="_blank">infamous Linus Torvalds talk</a> at Google on the story and thinking behind it as a source code management system. In between calling users of <a href="http://en.wikipedia.org/wiki/Concurrent_Versions_System" target="_blank">CVS</a> (include yourselves, users of <a href="http://subversion.apache.org/" target="_blank">Subversion</a>) who disagree with him “stupid and ugly” there was a little gem in there: that he thought he could write his own system, better than CVS, in <em>a couple of weeks</em>. It kind of blew my mind but after thinking about it a little it seems (whether it took two weeks or longer) that Torvalds succeeded because he had defined a good problem and conceived a solution for it[2]. It wasn’t that he used a special language or tool, it was because he had a good problem set. </p>  <p>This year I am going to try something different. Instead of seeking out the new in my toolset, I’m going to turn back to what I know and use on a daily basis. After more than a decade, it’s easy to fall into old habits and use time pressure as an excuse for ignoring newer, better techniques that exist today[3]. Rather than gaining my novelty from a shiny new language, I’m going to try to shift my focus to problems: finding tough ones, coming up with good solutions and being persistent about getting them solved. Some problems are solved quickly (and oh how so many of us like to brag how quickly we got something done) but a lot of them take a long time on the order of years of accretion[4]. And out of the years of accretion and persistence real expertise is born, the kind where you can make a meaningful presence with something to offer in the programming community to which you belong. Or so I would hope: this is my present thinking. </p>  <p>I wish I had some conclusion, some form of wisdom on learning new language sand becoming a better programmer. Instead I am limited to anecdote, experience, and personal experiments. This is the 2013 version where my resolutions as a programmer are directed at problems before solutions.</p>  <p>&#160;</p>  <p>[1] Homage to Steve Yegge who wrote a lot about the <a href="http://steve-yegge.blogspot.com/2007/02/next-big-language.html" target="_blank">Next Big Language</a>.</p>  <p>[2] Some might discount the fact that Linus was really writing his own version of a distributed version control system modeled on Bitkeeper – hence it wasn’t really that big of a deal. This brings to mind a Picasso quote: </p>  <blockquote>   <p>“Good artists copy, great artists steal.”</p> </blockquote>  <p>Porting an idea is a good problem to work on and even if Git was inspired, it does have meaningful differences as <a href="http://ondioline.org/mail/bitkeeper-and-the-genesis-of-git" target="_blank">this old email</a> from Linus indicates. I can only imagine how different they are now, 7 years later.</p>  <p>[3] I can think of countless examples: in C# I often use iteration where I could take advantage of LINQ. I often misappropriate CSS style definitions and don’t take good advantage of combining CSS classes with JavaScript. </p>  <p>[4] Although this should be self evident, how about the language of C# itself? Very useful from the get go but trying to revisit code from the past without generics and LINQ is quite painful. It bears mention that there is a balance of a solution getting better and then when the solution begins to get bloated from unnecessary features aka “<em>creeping featuritis</em>.” </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Tablet Wars: A Personal Account]]></title>
    <link href="http://t3rse.github.io/2012/12/31/The-Tablet-Wars-A-Personal-Account/"/>
    <updated>2012-12-31T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/31/The-Tablet-Wars-A-Personal-Account</id>
    <content type="html"><![CDATA[<p>This is a personal account in <strong>The Tablet Wars</strong>. Mine is not the voice of the powerful insider; I don’t represent any company and have no major stakes from which my opinion will yield major benefit. If you want professional reviews I would recommend <a href="http://www.theverge.com/" target="_blank">The Verge</a>. Instead imagine me as a common soldier of the American civil war… a certain David Snow, the baseborn son of a wandering freed slave and Sioux woman who took up arms in a Minnesota regiment based out of Fort Snelling with the hopes that my personal journal of the war would be meaningful to me at some point in the future when all the emotions of war were distant even if the fog never lifted. </p>  <p><font size="4"><strong>Ruminations of War in <a href="http://blogs.denverpost.com/captured/2011/02/23/from-the-archive-frontier-life-in-the-west/2713/" target="_blank">Dakota Territory</a></strong></font></p>  <p>My interest in tablets began with the first announcement of the iPad. I recognized that these devices presented a new form factor, a new way of experiencing the web that to date had not existed. My thinking was influenced by reading people like <a href="http://www.amazon.com/s/?_encoding=UTF8&amp;tag=t3rse-20&amp;linkCode=ur2&amp;camp=1789&amp;creative=390957&amp;field-keywords=Donald%20Norman&amp;url=search-alias%3Daps" target="_blank">Donald Norman</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="https://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=ur2&amp;o=1" width="1" height="1" /> from whom I grudgingly understood that the clunky multi-purpose “computer” would be replaced by devices that had computing power but much more specific in their goals. Early tablets were fascinating but too new and expensive to have any appeal. </p>  <p><font size="4"><strong>Arrival at <a href="http://www.historicfortsnelling.org/history/military-history/civil-war" target="_blank">Fort Snelling</a>, First Encounters</strong></font></p>  <p>While it may not count as a tablet, my first handheld was a <a href="http://www.amazon.com/Kindle-DX-Wireless-Reader-3G-Global/dp/B002GYWHSQ/ref=sr_1_1?ie=UTF8&amp;qid=1356929688&amp;sr=8-1&amp;keywords=kindle+dx" target="_blank">Kindle DX</a>. You would be hard pressed to find someone who loved their Kindle the way I loved mine; it a perfect fit for my primary use case of reading. I chose the larger Kindle DX because it would enable me to purchase digital copies of technical books and fit each page to the screen. After having it I made the quick realization that the Kindle’s MOBI format was the best reading experience, despite the screen size. This turned out alright since the two publishers I tended to buy from, <a href="http://oreilly.com/" target="_blank">O’Reilly</a> and <a href="http://manning.com/" target="_blank">Manning</a>, release their eBooks in multiple formats including MOBI (Kindle format). Another key benefit of the Kindle was the ability to read newspapers and magazines while skipping all the clutter of owning physical copies. It’s incredible how fast that can build up, especially since I spend a lot of time reading what’s in print. Combined with my packrat sensibilities, it made for a permanent mess in my home office [1]. </p>  <p>I had a chance to get involved first hand with The Tablet Wars last year after I got a unique opportunity to develop <a href="http://www.daktronics.com/Company/NewsReleases/Pages/IPTVSystematNewMarlinsBallpark.aspx" target="_blank">a web based application targeting mobile devices</a>. The company provided me with both an iPad 2 and Galaxy Tab to use as part of the effort. The project was fun and challenging but my use of the tablet devices was limited to testing our application and getting stock quotes. The iPad 2, with a combination of a better browsing experience and more mature app ecosystem, fully eclipsed the Galaxy Tab in my usage. </p>  <p>It became clear to me that while the iPad 2 always had the “whiz! bang! swipe! color!” showiness that could impress onlookers (for about 30 seconds), I preferred my Kindle DX for reading, especially anything long form – my <a href="http://en.wikipedia.org/wiki/Skeuomorph" target="_blank">skeuomorph</a> bit is definitely off [2]. The information flow on the Kindle worked better for me as well: content from blogs and other subscriptions was pushed to it on a periodic basis so I spent most of my time just focused on reading. The browsing and app centric model of the iPad 2 gave me a tendency to hunt and peck a lot, clicking through links or grazing from one app before switching to something else. A disciplined user may not have this problem though I am skeptical because the device lends itself to that mentality. </p>  <p><font size="4"><strong>Shipping Out with the 68<sup>th</sup> Regiment of <a href="http://en.wikipedia.org/wiki/United_States_Colored_Troops" target="_blank">USCT</a></strong></font></p>  <p>The introduction of the Google Nexus and the rumors at the time of a Microsoft Tablet pulled me completely into the war since I realized that I needed a little more interaction (e.g. email, calendar) than my Kindle could give me in a portable tablet. It made a lot of sense to start the process of saving [3] to get a ramp up for a decision around the time Microsoft released something. As a programmer of things primarily Microsoft, it seemed to make sense that theirs was the ecosystem that would make the best fit for me. But I was not ready to commit because there were many other wildcards: I love the Amazon ecosystem and wanted to keep what I had purchased over the years of having my Kindle DX as well as continue to have the ability to buy from their vast selection of books [4]. This made me interested in the Kindle Fire HD. Add to this all of the positive reviews of the Google Nexus products and I was in a state of indecision. The one thing that became steadily clear was that I wasn’t interested in the Apple ecosystem for one simple reason: I hate iTunes with the heat of a thousand suns [5].</p>  <p><font size="4"><strong>Battles, Victory at <a href="http://www.nps.gov/apco/black-soldiers.htm" target="_blank">Appomattox</a></strong></font></p>  <p>After several months of saving and reading reviews, the decisive moment was the introduction of the Microsoft Surface. I wish it was victory for the Surface but what made for the decisive moment was instead a realization that the device was not for me. This did not come down to technical specifications or the lack of apps, as many have been eager to point out. I, and many others like me, were simply priced out of the Microsoft ecosystem. The introductory price along with a keyboard would have run for more than $600, as steep if not steeper than a brand new iPad 3. I also recognized that the introductory RT devices were running a different version of Windows altogether and this would generate compatibility problems. Finally, the limitation of installing software only through the Microsoft store gave me a similarly distrustful intuition about things, similar to iTunes. </p>  <p>I haven’t given up on Windows 8, or a future in which I run a Microsoft operating system on a tablet device. But at present, the cost of these devices makes them fit into the category of “laptop replacement” rather than tablet. I’ve been ogling the Lenovo Yoga and anticipate owning one sometime before the end of next year [6]. When I’ve got the money saved I’ll probably shop for something that can fake the tablet experience but that also has enough muscle to help with my day to day computing. </p>  <p>In the end, after realizing I wouldn’t pick up a Surface, I decided to purchase a Galaxy Nexus 7. The decision between that and the Kindle Fire HD wasn’t easy, but in the end it had a slight advantage for a tinker like me where the Kindle Fire HD is a great device for consuming content, running apps, and living in the Amazon ecosystem. The price point, $199, was good as well for a device I intended to use as a corollary rather than a replacement to my digital life with the computer. </p>  <p><font size="4"><strong>Reclusion to <a href="http://www.flickr.com/photos/61003610@N05/5716249910/" target="_blank">Northern Minnesota</a>, Final Thoughts</strong></font></p>  <p>One thing I’ve learned over the years as a programmer (and as a human?) is that I’m a walking edge case. My thought process and decisions make a lot of sense for me because of my personal use cases but because I think and go about things differently than most people, I can never say that what works for me applies to others. A teenage boy who is really into Michael Bay films and video games, for example, might be better off with a PS Vita than heeding the advice of a man with a toddler and gray hair like me [7]. With that said, here is a summary of what I do on my tablet and why the Nexus 7 was a great fit for the money I spent: </p>  <p>1. Email, Calendar, Reader, other Google Stuff    <br />The Google ecosystem is top notch and their apps on the Nexus 7 are first class.</p>  <p>2. Web Browsing    <br />Chrome on Nexus is excellent.</p>  <p>3. Financial Information    <br />I use Bloomberg and CNBC apps. The CNBC Realtime app on iPad is much more robust so I’ve shifted more to Bloomberg on the Nexus. Truth be told Twitter is the best financial app – search $SYMBOL e.g. <a href="https://twitter.com/search?q=%24DDD&amp;src=typd" target="_blank">$DDD</a>&#160;</p>  <p>4. Music    <br />TuneIn Radio Pro, Pandora, Amazon Music, Google Play all do the trick. TuneIn Radio is a great way to catch my old home station, <a href="http://www.kcrw.com/" target="_blank">KCRW</a> and explore <a href="http://www.fipradio.fr/" target="_blank">international radio stations</a>. </p>  <p>5. Skype    <br />Works great, especially since I’m many leagues from my immediate family.</p>  <p>6. Facebook    <br />Pretty decent, on par with the iPad native app</p>  <p>7. Twitter    <br />I have come to love <a href="https://play.google.com/store/apps/details?id=com.jv.falcon.pro&amp;hl=en" target="_blank">Falcon Pro</a> more than all my other twitter clients on any platform (Tweetdeck, Metrotwit, etc)</p>  <p>8. Evernote    <br />Great for consuming documents. The app allows for recording audio so I usually speak a quick note I want to make to myself. I’ve also started to leverage the Evernote Web Clipper in lieu of Instapaper for some web pages, especially where content format is important (e.g. sample code)</p>  <p>9. <a href="http://pluralsight.com/training" target="_blank">Pluralsight</a>     <br />Not quite as good as watching on my PC but still a great option especially when I need to be away from the computer (e.g. watching a toddler)</p>  <p>10. Amazon Kindle    <br />Where I read virtually anything from my library. </p>  <p>&#160;</p>  <p>Notes:</p>  <p>[1] There is still a mess. Technology doesn’t solve genetic/familial predispositions.</p>  <p align="left">[2] I guess you could say I’m more of a minimalist or utilitarian. Animated page turns, fake leather calendars, “book shelves” all represent noise. Think <a href="http://upload.wikimedia.org/wikipedia/commons/5/54/Ludwigsbg_mirror.JPG" target="_blank">Rococo</a> versus <a href="http://www.zeitlosberlin.com/typo3temp/pics/stamped/zeitlos-berlin_dressing-table-with-mirror-in-bauhaus-design.d8c0160db8.jpg" target="_blank">Bauhaus</a>. </p>  <p>[3] If you are working on saving toward a specific goal, try out <a href="https://www.smartypig.com/" target="_blank">Smarty Pig</a> as a way of helping you put the money away. </p>  <p>[4] It’s not just the well known authors and best sellers. Some of the most interesting reads I’ve gotten from Amazon are the cheaper, self-published eBooks. Books like <a href="http://www.amazon.com/gp/product/B004DUMZSS/ref=as_li_ss_tl?ie=UTF8&amp;tag=t3rse-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004DUMZSS">ANESthetized</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=B004DUMZSS" width="1" height="1" />, which I would never find in a store.</p>  <p>[5] There are many reasons for this but let’s start with <a href="http://www.slate.com/articles/technology/technology/2012/11/itunes_11_it_s_time_for_apple_s_horrible_bloated_program_to_die.html" target="_blank">how bloated the software has become</a>. I do love my iPod though so I’ve been using <a href="http://www.mediamonkey.com/" target="_blank">Media Monkey</a>. Price was another factor though the iPad Mini didn’t have the technical specs to compete with the Nexus. </p>  <p>[6] It would be nice to see a variant that let me have at least 8GB of RAM though I think 16GB will be a requirement for my next machine. </p>  <p>[7] I should disclose that my wife has an iPad 2 that is as perfect a fit for her as the Nexus is for me. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Birthday Perl… and Many More]]></title>
    <link href="http://t3rse.github.io/2012/12/21/Happy-Birthday-Perl%E2%80%A6-and-many-more/"/>
    <updated>2012-12-21T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/21/Happy-Birthday-Perl…-and-many-more</id>
    <content type="html"><![CDATA[<p>Perl turned 25 <a href="http://news.ycombinator.com/item?id=4936701" target="_blank">a few days ago</a>. What makes that a remarkable achievement is that the language remains cutting edge, pervasive, and useful in the present day. While there are many detractors to the language and its philosophy[1] that I’ve encountered in my experiences as a programmer, I continue to like the language and perhaps one day I will even find a way for someone to pay me to use Perl.</p>  <p>My interest in Perl started with a college friend, <a href="https://plus.google.com/u/0/110076447868543374470/about" target="_blank">Chris Nandor aka pudge</a>. There was a small web development forum in our on campus BBS where people could post questions and answers. I always admired the facility with which problems could be solved in Perl. I don’t remember all the details (I think I used <a href="http://en.wikipedia.org/wiki/Fermat's_little_theorem" target="_blank">Fermats Little Theorem</a>) but after being proud of myself for solving a <a href="http://google-tale.blogspot.com/2008/07/google-billboard-puzzle.html" target="_blank">Google job application puzzle</a> on a billboard he decimated the problem in a few lines of Perl[2]. Chris worked on <a href="http://slashdot.org/" target="_blank">Slashdot</a> and did a lot of other cool things with Perl, things like <a href="http://static.espn.go.com/mlb/s/2001/0624/1218244.html" target="_blank">voting for Nomar Garciaparra 14,000 times</a> in balloting for the “all star” game[3,4]. Things like that made me think: what if I could figure out a way to use that language for my own devices?</p>  <p>I started with the <a href="http://www.amazon.com/s/?_encoding=UTF8&amp;tag=t3rse-20&amp;linkCode=ur2&amp;camp=1789&amp;creative=390957&amp;rh=i%3Aaps%2Ck%3Ao%27reilly%20perl&amp;field-keywords=o%27reilly%20perl&amp;url=search-alias%3Daps&amp;sprefix=o%27reilly%20perl%2Caps%2C212" target="_blank">O&#8217;Reilly Perl Books</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="https://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=ur2&amp;o=1" width="1" height="1" /> and enjoyed the wry humor with which they were written. It soon became apparent to me that unlike the faceless drone corporate developers writing code in Visual Basic with variable names like <em>intCounter</em>, the Perl community was an agglomeration of really smart, lateral thinkers with senses of humor to match the inventor of the language, <a href="http://www.wall.org/~larry/" target="_blank">Larry Wall</a>.</p>  <p>Although I did work on a few things both for myself and for others, I never quite graduated to a big project or the Perl community unless you count mailing lists and listening to virtually every episode of the <a href="http://perlcast.com/" target="_blank">Perlcast</a>. I never made it to <a href="http://yapc.org/" target="_blank">YAPC</a> or <a href="http://www.oscon.com/oscon2013" target="_blank">OSCON</a> although it’s still a goal of mine to get to one someday. But my efforts with Perl really did pay off; as a part of learning the language I was forced to become proficient with Regular Expressions and my efforts in doing that led to <a href="http://nregex.com/">nregex.com</a>, my .NET Regular Expression testing tool.</p>  <p>I am biased but I think .NET developers should care about Perl for two reasons: the first is because it’s impossible to learn Perl without getting better at Regular Expressions, which is a portable skill. The second reason is CPAN, the <a href="http://www.cpan.org/" target="_blank">Comprehensive Perl Archive Network</a> (online network of libraries). There are thousands of modules in CPAN that deal with a lot of the muck that you run into as a developer if you’re dealing with “real world” problems that are boring but not really commercially viable for a big company to be interested in. </p>  <p>This is a long and belated birthday card, but what more can you expect from a fan boy? On my bucket list: one day port an interesting module[5] from CPAN to .NET.</p>  <p>[1] <a href="http://en.wikipedia.org/wiki/There's_more_than_one_way_to_do_it" target="_blank">TMTOWTDI</a> (there’s more than one way to do it) vs there should be only one way to do things (<a href="http://www.python.org/dev/peps/pep-0020/" target="_blank">Zen of Python</a>)</p>  <p>[2] <a href="http://google-tale.blogspot.com/2008/07/google-billboard-puzzle.html">http://google-tale.blogspot.com/2008/07/google-billboard-puzzle.html</a> – the trick was to just iterate through digits of <em>e</em> in blocks of 10 making http requests.</p>  <p>[3] Archived story at <a href="http://static.espn.go.com/mlb/s/2001/0624/1218244.html">http://static.espn.go.com/mlb/s/2001/0624/1218244.html</a>. This may not seem like a big deal since today’s Microsoft ecosystem has equivalents of LWP::Simple but remember the Perl community has had that for many years.</p>  <p>[4] Okay, some things that are more substantive like running <a href="http://use.perl.org/use.perl.org/" target="_blank">use.perl.org</a> but this is one of the fun ones I remember since I worked with some avid baseball fans at the time</p>  <p>[5] Such as Twig ( <a href="http://search.cpan.org/~mirod/XML-Twig-3.42/Twig.pm">http://search.cpan.org/~mirod/XML-Twig-3.42/Twig.pm</a> ) though I&#8217;m open to suggestions</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Age in Developer Years: A Proposal]]></title>
    <link href="http://t3rse.github.io/2012/12/18/Your-Age-In-Developer-Years-A-Proposal/"/>
    <updated>2012-12-18T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/18/Your-Age-In-Developer-Years-A-Proposal</id>
    <content type="html"><![CDATA[<p>At the <a href="http://www.meetup.com/sfdevs/" target="_blank">local developer meetup</a> someone was jokingly talking about “developer years” as an analog to “dog years.” It is kind of fun to think about – I didn’t get started until I had already finished school but there are a lot of people who already have years under their belts by the time they finish high school. </p>  <p>I probably toyed with the idea longer than it’s usefulness but came up with the following methodology for determining developer years: “How many data access frameworks from Microsoft have you lived through?” My start was in the waning years of DAO and RDO, just before they were replaced by ADO. I am not sure if anyone has a full list of data access APIs from then until now but my guess is that I am 8: </p>  <ol>   <li>DAO / RDO</li>    <li>MDAC 1.x</li>    <li>MDAC 2.x</li>    <li>ADO.NET</li>    <li>Linq to Sql</li>    <li>EF* </li>    <li>EF 4*</li>    <li>EF 5*</li> </ol>  <p>I am not counting minor releases (there were 9 for MDAC 2.x as an example). I also placed an asterisk by technologies I have never used in a production environment.</p>  <p>I wonder what other ways can you measure your developer years? How many times must we solve the age old problem of <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank">CRUD</a> with a database? Or generating HTML for web pages?</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tolkien, the Hobbit, and Foisted Imagination]]></title>
    <link href="http://t3rse.github.io/2012/12/16/Tolkien-The-Hobbit-and-Foisted-Imagination/"/>
    <updated>2012-12-16T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/16/Tolkien-The-Hobbit-and-Foisted-Imagination</id>
    <content type="html"><![CDATA[<p>I grew up on fantastic fiction. Even before a kid named Scott regaled the tales of <em>The Lord of the Rings</em> to me on our trips down <a href="https://maps.google.com/maps?q=Elgeyo+Marakwet,+Kilimani,+Nairobi,+Nairobi+Province,+Kenya&amp;hl=en&amp;ll=-1.293345,36.779681&amp;spn=0.00232,0.003484&amp;geocode=FSM57P8dMzUxAg&amp;hnear=Elgeyo+Marakwet,+Kilimani,+Nairobi,+Nairobi+Province,+Kenya&amp;t=h&amp;z=19" target="_blank">Elgeyo Marakwet</a>, I remember things like a nicely illustrated version of Hans Christian Anderson’s stories and a predilection to tales read by <a href="http://www.youtube.com/playlist?list=PL00922341758896BF">The Superscope Story Teller</a>. </p>  <p>It may have been a blind choice on my end but I remember stumbling upon a character named Drizzt Do’Urden and the world of <a href="http://forgottenrealms.wikia.com/wiki/Faer%C3%BBn">Faerun</a> in books by R.A. Salvatore in college. I loved Salvatore’s stories so much I read everything of his I could get my hands on. Even as a slow reader, it wouldn’t be long before I was slowing down for the last chapter, trying to make the adventure last as long as possible. </p>  <p>A few months ago I ran across <a href="http://geeksguideshow.com/2011/10/22/ggg49-r-a-salvatore/">a podcast interview</a>[1] of Salvatore and made a shocking discovery: all these years I had the pronunciation of his signature character Drizzt wrong. Salvatore, with his true Bostonian lilt, sounds like he says “Dritts.” In my mind and with friends, I had always said “Driz-it.” It was a little jarring since my relationship with those books has spanned the last 20 years. </p>  <p>I would hope that Salvatore would not care as much. In the creative continuum his piece was done – to create a story and build the foundation from which a person’s imagination could complete the picture. This continuum exists in everything that we as humans try to understand[2]. In the parts of our lives where we consume artistic expression we experience it in the movie scene that cuts off, the action between cells in a comic book, or the dramatic pause in a song where your head keeps bobbing. </p>  <p>It’s this continuum of creative production and consumption[3] that was kindled in those early years of fiction; whether I was imagining Hans Christian Anderson’s mermaids or experiencing dread as I tried to conjure a mental picture of Medusa. It carried me forward to Salvatore’s dark elf and the other tales of might, magic, and adventure quest so intertwined with my formative years. Imagination of this kind was a wonderful and intoxicating thing. </p>  <p>It is the loss of this imagination that I have begun to lament with the success of Peter Jackson’s Middle Earth films; that world which had assembled itself in my head is now much more concrete as a sensory experience. It’s become increasingly difficult to imagine characters without their portrayals and respective actors. Middle Earth has become, for the most part, an ode to the physical geography of New Zealand[4]. </p>  <p>Perhaps the biggest departure from my viewings of <i>The Lord of the Rings</i> film trilogy is the experience of putting on the <a href="http://en.wikipedia.org/wiki/One_Ring" target="_blank">One Ring</a>. In my mind this was a sinister thing and yet as described by Tolkien prior to Frodo’s journey, it seemed a benign and even pleasurable experience of invisibility. </p>  <p>My point in all this is not to bash the films which to date I have loved and watched repeatedly. And I want to go beyond the book snob’s snide comment that films are always inferior. There have been many elements of interpretation from the film that have helped me understand the books more and Peter Jackson has been masterful, along with the cast and crew, at bringing Middle Earth to life. What I do want to pinpoint is how there is a loss of freedom with the imagination when something is done as well – how you lose the words could sound themselves out in your head any way that you liked, how it was you who remained in charge of the creative and artistic direction of a story that transferred from the pages of a book into your head. </p>  <p>There is no doubt that I will see and enjoy all of the films that make up <i>The Hobbit</i> film trilogy. I’m the target market, I’m a fan. As my imagination is filled I will notice more and forget a little. It’s the tradeoff of seeing and enjoying the film version of a book that’s been a part of my life.</p>  <p>[1] <a href="http://geeksguideshow.com/" target="_blank">Geek’s Guide to the Galaxy</a> is probably the best fantastic fiction podcast I’ve run into online. </p>  <p>[2] I’m always fascinated by how our imagination completes our religious belief. As a Christian, I find it interesting to look at renaissance artwork of Biblical events to see how outlandish or frozen in time this can be. For example, Bruegel’s <a href="http://uploads5.wikipaintings.org/images/pieter-bruegel-the-elder/christ-carrying-the-cross-1564.jpg!HD.jpg" target="_blank">Christ Carrying the Cross</a>.</p>  <p>[3] I wanted to focus on imagination as an individual experience but when stories are circulated and popular enough, there is something of a collective imagination. One of Peter Jackson’s successes was tapping into the collective imagination that already existed for Tolkien’s stories and using popular Tolkien inspired artwork for keyframes in the film. Alan Le’s <a href="http://www.amazon.com/gp/product/0618640142/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0618640142&amp;linkCode=as2&amp;tag=t3rse-20">The Lord of the Rings Sketchbook</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0618640142" width="1" height="1" /> is a great book on this creative process that drove the film. </p>  <p>[4] New Zealand has woven itself so closely to Tolkien’s world that now <a href="http://www.discovernewzealand.com/index.cfm/nz-lord-of-the-rings-tours/?gclid=CPCB4b6HnrQCFeiPPAodWA4APg" target="_blank">a large amount of tourism</a> comes from people like me who want to experience it as Middle Earth. I’m not sure if that’s good or bad since it probably has merits of its own without being a fantasy kingdom but if someone gave me a chance to go, I’d be there. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It’s Not as Much Fun to Be Bullish]]></title>
    <link href="http://t3rse.github.io/2012/12/12/Its-Not-As-Much-Fun-To-Be-Bullish/"/>
    <updated>2012-12-12T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/12/Its-Not-As-Much-Fun-To-Be-Bullish</id>
    <content type="html"><![CDATA[<p>Mark Dow <a href="http://markdow.tumblr.com/day/2012/08/15" target="_blank">wrote</a> a little market forecast some months ago in August. His opening paragraph is a keeper, on why it’s not as much fun to be bullish. </p>  <blockquote>   <p style="line-height: 180%"><font size="4">“It’s not as fun to be bullish. Bears are smart. Bulls are wide-eyed optimists. Bears have data. Bulls tell stories. Bears make money when everyone else is in pain. Bulls make money when everyone else already claims to be a genius. In short, many of us get more satisfaction being bearish because the psychic payoff is greater: we calibrate our own self esteem not by our victories in absolute terms, but in our victories relative to others.”</font></p> </blockquote>  <p>I have to admit, I’m always a bit bullish but I’m more of the foolish optimist. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MOOCs, Coursera, and the Death of the University]]></title>
    <link href="http://t3rse.github.io/2012/12/07/MOOCs-Coursera-and-the-death-of-the-University/"/>
    <updated>2012-12-07T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/12/07/MOOCs-Coursera-and-the-death-of-the-University</id>
    <content type="html"><![CDATA[<p>I’m one of those strange birds (is it really so strange?[1]) who loved not just learning but school itself. I’m sure a large part of this were the schools I got to go to – a small private elementary school in Nairobi with kids from all walks of life, an equally small high school in the middle of some coffee fields on the outskirts of Nairobi, and my alma mater where I made most of my life long friendships. When I hear people say they “hated school” or “couldn’t wait to be done” it makes me a bit sad… most of my memories are developing friendships, the fun of learning and lots or arguments about how to solve the worlds problems. </p>  <p><font size="4">My Grad School Sob Story</font></p>  <p>I always thought I’d go to graduate school. I would go as far as to say it was an assumption until the logistics of life made their mark on my trajectory. The first logistic was money: I had none and in fact graduated with debt that I eventually paid back. The second was immigration: even after I was able to finish paying for undergrad, as a foreign worker my immigration status was tied to an H1 visa status provided by my employer and I had to keep my job if I intended to stay legally. If I stopped working I would have had to switch back to student status and in order to do that you have to prove logistic number one: that you have money. The final part of the puzzle I lacked was direction; as an accounting graduate the most logical step would be an MBA but I was much more inclined toward math or computer science, which would require me to double up my bachelors with prerequisites. </p>  <p>I haven’t quite given up on a traditional graduate education but what would have broken inertia in my early 20s has grown exponentially and the prospect of being on the downhill side of 30, with a family and a mortgage taking on several tens of thousands of dollars in expenses seems, to put it mildly, counterintuitive although a fair assessment is probably along the lines of irresponsible.</p>  <p><font size="4">MOOCs</font></p>  <p>But not only is my story fairly common (to the extent that it is being priced out of further education), it is also leading to one of the most exciting things developing on the internet: the <a href="http://en.wikipedia.org/wiki/Mooc" target="_blank">Massively Open Online Course</a> (MOOC). MOOCs are online courses but unlike the websites that simply provide materials or lecture videos, the ones I’ve participated in are taught be some of the best professors and include elements of traditional course work like quizzes and assignments. Perhaps the most prominent MOOC&#160; There are three larger providers for MOOCs now online: <a href="http://www.coursera.com" target="_blank">Coursera</a>, <a href="https://www.edx.org/" target="_blank">Edx</a>, and <a href="http://www.udacity.com" target="_blank">Udacity</a>. All of the courses are free and the affiliated universities of these programs are for the most part recognizable[2]. Because the courses are online, they are also loosely scheduled; you can take them whenever you want but there are some dates associated with courses beginning and ending as well as deadlines for assignments that need to be handed in for credit and grading. </p>  <p>I signed up for a few courses from <a href="http://www.coursera.com" target="_blank">Coursera</a>, <a href="https://www.coursera.org/course/progfun" target="_blank">Principles of Functional Programming in Scala</a> taught by <a href="http://en.wikipedia.org/wiki/Martin_Odersky" target="_blank">Martin Odersky</a> (the language designer of Scala, professor at EPFL) and <a href="https://www.coursera.org/course/compinvesting1" target="_blank">Computational Investing</a>, taught by <a href="http://www.cc.gatech.edu/~tucker/" target="_blank">Tucker Balch</a> of Georgia Tech. The first helps me fill the gap of not having a degree in Computer Science even though the school of hard knocks has propelled me into a career as a software engineer. The second is related to an area of growing interest, investing and quantitative finance. </p>  <p>Thus far the experience has been good. I learned that in order to get credit you need to pay attention to the dates of the offering otherwise there is no one to grade assignments. I have also been reminded that although it is lots of fun to watch videos and learn things, being held accountable by assignments is what requires the real commitment. The material is very academic and fits really well into what I was hoping; for example in Odersky’s Scala class lectures on function evaluation, recursion and currying are where I feel I fill the gap of being a software engineer without the classical CS background. Perhaps this is the difference between education and training: education is much more broad and theoretical where training is specific – I plan to write more about it at length but <a href="http://www.pluralsight.com" target="_blank">Pluralsight</a>, whose courses I have watched and learned a lot from, focuses on more practical training for developers rather than education[3]. </p>  <p><font size="4">The Death of the University</font></p>  <p>When people talk about “the death of XYZ” I usually find myself skeptical; a bit too sensational, a bit too attention grabbing. In this case it’s sincere; I am in complete agreement with a lot of the assessments of traditional university education and how it must change. Mark Cuban recently wrote <a href="http://blogmaverick.com/2012/05/13/the-coming-meltdown-in-college-education-why-the-economy-wont-get-better-any-time-soon/" target="_blank">a blog post</a> intimating as much, comparing Higher Education to the Newspaper industry. The signs are out there for all to see – try this chart [3] which shows the costs of a university education since 1985. </p>  <p><a href="http://www.t3rse.com/image.axd?picture=CollegeCosts.jpg"><img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="CollegeCosts" border="0" alt="CollegeCosts" src="http://www.t3rse.com/image.axd?picture=CollegeCosts_thumb.jpg" width="410" height="329" /></a></p>  <p>If costs inflation of more than 500% are not enough, my problem of not having enough money is pretty common. But the difference between me and my American peers who went to grad school is that they got loans – lots of loans[4]. The current amount of student loan debt is approaching $1 trillion. Combine that much debt with the tremendous inflation in cost and the system is unsustainable.</p>  <p>I don’t think that MOOCs will kill off higher education, but there are a few things that we can look toward: </p>  <p>1. The rise of the autodidact who has enough discipline to stick through online courses and build a learning portfolio</p>  <p>2. The prestige of the professor, not the institution. </p>  <p>3. Innovation around the accountability and mentorship models of online learning. </p>  <p>4. Diminished interest in masters programs as the pick and choose model of further education allows people to tailor their post graduate learning toward their professional situation. </p>  <p>&#160;</p>  <p>The development of MOOCs is pretty exciting. They represent, for me, an evolution toward that dream of further education that I always hoped I’d get. It won’t be in the hallowed halls of a prestigious institution but I will have their professors; who would have thought an African kid from Nairobi would learn Scala as a direct tutor from the likes of Martin Odersky? Beyond that, and more importantly, they make me hopeful that I will be able to help my son with his education: supplementing his formative years and perhaps changing how he goes to university. </p>  <p>&#160;</p>  <p>[1] I don’t think it’s all that strange to be a lifelong learner. A lot of feelings of alienation come from hanging out with people who don’t value similar things.</p>  <p>[2] I used to venerate well known schools a little too much. The value of some of these schools is the amount of money they have for things like research but for getting the basics I’ve started to put a lot more emphasis on the student, not the school.</p>  <p>[3] Source: Bureau of Labor Statistics, from the article <a href="http://economix.blogs.nytimes.com/2012/03/02/why-tuition-has-skyrocketed-at-state-schools/" target="_blank">Why Tuition Has Skyrocketed at State Schools</a> on NYT.</p>  <p>[4] 40% of people under 30 have outstanding student loans, and the average outstanding debt is $23,300. 10% of those owe north of $54,000 and 3% owe more than $100,000. Source: Federal Reserve Bank of New York cited in the article <a href="http://www.nytimes.com/2012/03/06/business/study-finds-a-growing-student-debt-load.html?_r=2&amp;utm_source=Daily+Digest&amp;utm_campaign=69c82a8912-DD_3_6_123_6_2012&amp;utm_medium=email&amp;" target="_blank">Fed Study of Student Debt Outlines a Growing Burden</a> on NYT.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT Conversations: Mission Accomplished]]></title>
    <link href="http://t3rse.github.io/2012/11/29/IT-Conversations-Mission-Accomplished/"/>
    <updated>2012-11-29T00:00:00-06:00</updated>
    <id>http://t3rse.github.io/2012/11/29/IT-Conversations-Mission-Accomplished</id>
    <content type="html"><![CDATA[<p>Today while digging up an old podcast of a talk by Clayton Christensen I discovered IT Conversations will be no more as of year’s end. Doug Kaye <a href="http://www.blogarithms.com/index.php/archives/2012/09/16/cn-mission-accomplished/" target="_blank">writes</a>: </p>  <blockquote>   <p style="line-height: 180%">We’re proud of what we’ve accomplished. Much of what we’ve pioneered in the past ten years is now commonplace. Our goal was to make it easy for others to produce audio recordings of events and make them available to the world for free. That’s now the norm. We have succeeded.</p> </blockquote>  <p>Indeed they have succeeded. I wanted to just post a small homage to what IT Conversations meant to me and point to a few of my favorite talks given over the last decade. These were easy for me to find since I used to download and archive podcasts just in case. The good news, however, is that the content is going to The Internet Archive and should be there for the foreseeable future. </p>  <p>IT Conversations always represented the ability for me to reach out and connect to the better and brightest minds out there who were thinking about innovation and technology. This became all the more valuable after I relocated to South Dakota where I didn’t have a network of geek friends to feed off of and find inspiration. Even now, amongst the noises of the internet and information tsunami of social media, I can easily displace that sort of lonely feeling of working in isolation by finding a good podcast and making a virtual friendship. Even though their work is considered done I’ll still return to old favorites and enjoy the tell. With that said, here are just a few of the memorable talks over the years for me: </p>  <p><font size="4">Clayton Christensen: </font><a href="http://itc.conversationsnetwork.org/shows/detail135.html#" target="_blank"><font size="4">Capturing the Upside</font></a><font size="4"> – March 17, 2004</font></p>  <p><a href="http://en.wikipedia.org/wiki/Clayton_M._Christensen" target="_blank">Clayton Christensen</a> is a professor at the Harvard Business School. This talk covers ideas on innovation from his books <a href="http://www.amazon.com/gp/product/0875845851/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0875845851&amp;linkCode=as2&amp;tag=t3rse-20">The Innovator&#8217;s Dilemma: When New Technologies Cause Great Firms to Fail</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0875845851" width="1" height="1" /> and <a href="http://www.amazon.com/gp/product/1578518520/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1578518520&amp;linkCode=as2&amp;tag=t3rse-20">The Innovator&#8217;s Solution: Creating and Sustaining Successful Growth</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=1578518520" width="1" height="1" /> . He has since written more on the topic, applying his thinking to the healthcare industry in <a href="http://www.amazon.com/gp/product/0071592083/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0071592083&amp;linkCode=as2&amp;tag=t3rse-20">The Innovator&#8217;s Prescription: A Disruptive Solution for Health Care</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0071592083" width="1" height="1" /> and education in <a href="http://www.amazon.com/gp/product/0071749101/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0071749101&amp;linkCode=as2&amp;tag=t3rse-20">Disrupting Class, Expanded Edition: How Disruptive Innovation Will Change the Way the World Learns</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=0071749101" width="1" height="1" /> . </p>  <p><font size="4">Paul Graham: </font><a href="http://itc.conversationsnetwork.org/shows/detail188.html" target="_blank"><font size="4">Great Hackers</font></a><font size="4"> – July 27, 2004</font></p>  <p><a href="http://paulgraham.com/" target="_blank">Paul Graham</a> is a hacker, artist, and inventor among other things. His angel investing company, <a href="http://ycombinator.com/" target="_blank">YCombinator</a> is know far and wide as are his essays which are the basis of his book <a href="http://www.amazon.com/gp/product/1449389554/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449389554&amp;linkCode=as2&amp;tag=t3rse-20">Hackers &amp; Painters: Big Ideas from the Computer Age</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="http://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=as2&amp;o=1&amp;a=1449389554" width="1" height="1" /> . This talk covers the ground of <a href="http://www.paulgraham.com/gh.html" target="_blank">his essay on great hackers</a>. </p>  <p><font size="4">Tim O’Reilly: </font><a href="http://itc.conversationsnetwork.org/shows/detail197.html" target="_blank"><font size="4">Watching the Alpha Geeks</font></a><font size="4"> – October 3, 2002</font></p>  <p>Tim O’Reilly is a the guy behind O’Reilly media – I’ve posted before about how many books I’ve bought with an O’Reilly seal but there’s much more: an online book service as well as his now well known “radar” where new things in the world of technology and culture become uncovered. This talk set the stage for that and he discusses some of the things he looks for on his radar. </p>  <p><font size="4">Joel Spolsky: </font><a href="http://itc.conversationsnetwork.org/shows/detail3760.html" target="_blank"><font size="4">The Three Ingredients of Great Products</font></a><font size="4"> – May 30, 2008</font></p>  <p>Joel Spolsky has been internet famous for more than a decade with us developer types. Now his footprint on the web is much larger than the <a href="http://www.joelonsoftware.com/backIssues.html" target="_blank">essays and punditry</a> he began with as a marketing strategy for his company, Fog Creek. The reason? His collaboration with <a href="http://www.codinghorror.com/blog/" target="_blank">Jeff Atwood</a> on <a href="http://stackoverflow.com/" target="_blank">StackOverflow</a> and the <a href="http://stackexchange.com/" target="_blank">StackExchange</a> network of sites has revolutionized what it means to be a programmer in the internet age. Perhaps the same can be said for many other professions from <a href="http://math.stackexchange.com/?as=1" target="_blank">mathematics</a> to <a href="http://history.stackexchange.com/?as=1" target="_blank">historians</a>. In this talk you get the full Joel: humor, intelligence, and wisdom. Joel’s essays are collected in <a href="http://www.amazon.com/Joel-Spolsky/e/B001K8FTIE/?_encoding=UTF8&amp;camp=1789&amp;creative=390957&amp;linkCode=ur2&amp;tag=t3rse-20" target="_blank">a few books as well</a><img style="border-bottom-style: none !important; margin: 0px; border-left-style: none !important; border-top-style: none !important; border-right-style: none !important" border="0" alt="" src="https://www.assoc-amazon.com/e/ir?t=t3rse-20&amp;l=ur2&amp;o=1" width="1" height="1" />. </p>    <hr />    <p>I could keep going with all the great talks on IT Conversations… <a href="http://itc.conversationsnetwork.org/shows/detail307.html" target="_blank">Mark Cuban</a>. <a href="http://itc.conversationsnetwork.org/shows/detail51.html#" target="_blank">Rick Chapman</a>. <a href="http://itc.conversationsnetwork.org/shows/detail3490.html" target="_blank">Danah Boyd</a>. <a href="http://itc.conversationsnetwork.org/shows/detail4051.html" target="_blank">Mario Livio</a>. And so many more - </p>  <p>To Doug Kaye, Phil Windley and everyone else involved, <strong>thank you</strong>. </p>]]></content>
  </entry>
  
</feed>
