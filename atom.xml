<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fail Better]]></title>
  <link href="http://t3rse.github.io/atom.xml" rel="self"/>
  <link href="http://t3rse.github.io/"/>
  <updated>2014-04-22T09:20:13-05:00</updated>
  <id>http://t3rse.github.io/</id>
  <author>
    <name><![CDATA[David aka t3rse]]></name>
    <email><![CDATA[david.seruyange@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hallo Welt: Octopress Edition]]></title>
    <link href="http://t3rse.github.io/2014/04/21/hello-from-octopress/"/>
    <updated>2014-04-21T22:46:19-05:00</updated>
    <id>http://t3rse.github.io/2014/04/21/hello-from-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been through a lot of blogging engines. My first blog was built on the <a href="http://en.wikipedia.org/wiki/Radio_UserLand">Radio Userland</a> platform, created by Dave Winer who technorati know as the guy (controversially) behind RSS. I&rsquo;ve used <a href="https://dasblog.codeplex.com/">Das Blog</a>, <a href="http://metadeveloper.blogspot.com/">Blogger</a>, and  <a href="http://www.t3rse.com">BlogEngine.net</a>. I&rsquo;ve used <a href="http://da5id.tumblr.com/">Tumblr</a>. I&rsquo;ve even implemented my own lightweight blogging platform in the past. It&rsquo;s interesting how the concept of blogging is so simple but the platforms and tools are anything but. Perhaps it has to do with what I will call the &ldquo;Todo List Software Principle&rdquo; &ndash; the more generalized a problem set, the more variety and churn will exist for technical solutions.</p>

<p>Each platform I&rsquo;ve used had things I liked: Userland dealt with hosting and server configuration while I simply wrote, Das Blog was written with a toolset I understand well, Blogger was painless like Userland but also free, writing my own blog engine helped me understand why it was so difficult and BlogEngine was more modern and sleek than Das Blog.</p>

<p>Each platform also had pain points: Userland wasn&rsquo;t free and ultimately my content was not my own. Das Blog had pain points when new versions of the .NET framework started to come around. Blogger was free but complex if you needed to engage the templates and underlying structure of the engine. BlogEngine&rsquo;s ecosystem seems to have died and comments are a nightmare.</p>

<p>My colleague <a href="http://staxmanade.com/" title="Staxmanade">Staxmanade</a> introduced me to <a href="http://octopress.org/">Octopress</a> as he was in the process of migrating old posts from blogger and writing <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">a series of posts about it</a>. Octopress is an experiment but here is what I like: it strips away a lot of the abstractions from my previous blog engines and allows me to deal with, for the most part, plain text. It also integrates with Github where my content can be hosted for free. Finally it&rsquo;s a programmer&rsquo;s blog engine; the idea of using markdown and code to build my blog is appealing.</p>

<p>Although I&rsquo;m certain <a href="http://octopress.org/">Octopress</a> is not the last blog engine I try my hand at (foreshadowing here) I will be using it in the forthcoming weeks both to follow <a href="http://staxmanade.com/2014/04/migrating-blogspot-to-octopress-part-1-introduction/">the Staxmanade series</a> and to learn more about Ruby and statically generated websites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDC 2011]]></title>
    <link href="http://t3rse.github.io/2011/06/20/ndc-2011/"/>
    <updated>2011-06-20T07:25:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/20/ndc-2011</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <p>It may be easy to miss amidst all the hoopla around Windows 8 but the Norwegian Developers Conference just released all their session vidoes on the site. </p>  <p>It’s been a while since I’ve gotten to go to a conference but the last few I have attended were put on by Microsoft. Although this has advantages in the sense that it coalesces the “experts” of specific Microsoft technologies, many of the presenters work at Microsoft and therefore don’t have a similar problem set that you or I might slogging our way through building products, often with older (read: more “boring”) software. There are also some talks on development techniques like <a href="http://behaviour-driven.org/">BDD</a> and <a href="http://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> that are not product specific.</p>  <p>The good thing about NDC is that it seems a lot of the presenters come from an outside perspective so it’s a good balance for a lot of the MIX / PDC type stuff I’ve been watching of late. Without further ado:</p>  <p>Direct Download from NDC website: <a href="http://ndc2011.no/agenda.aspx?cat=1071&amp;id=-1&amp;day=3726">Day 1</a> | <a href="http://ndc2011.no/agenda.aspx?cat=1071&amp;id=-1&amp;day=3727">Day 2</a> | <a href="http://ndc2011.no/agenda.aspx?cat=1071&amp;id=-1&amp;day=3728">Day 3</a></p>  <p><a href="http://goo.gl/IKrBh">Roy Osherove’s “unofficial” torrent</a></p>  <h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search, Match, Replace, Generate]]></title>
    <link href="http://t3rse.github.io/2011/06/15/search-match-replace-generate/"/>
    <updated>2011-06-15T23:56:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/15/search-match-replace-generate</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <p>Many moons ago I got about <a href="http://www.hanselman.com/blog/ScottHanselmans2007UltimateDeveloperAndPowerUsersToolListForWindows.aspx">0.25 seconds of fame</a> when <a href="http://www.nregex.com">nRegex</a>, a tool I wrote for evaluating regular expressions of the .NET flavor,&#160; got a bit of acclaim. It was one of the better days of my life, an encouragement that sometimes struggling alone in a South Dakota basement can lead to a little bit of notice. </p>  <p>One of the tricks that keeps me going back to nRegex is being able to generate code by using a regular expressions. Regular Expressions, though often reviled, turn out to be quite handy in a lot of situations. </p>  <p>Let’s say you have a table that looks like this:</p>  <pre class="brush:sql">	CREATE TABLE PackingList(<br />		PackingListId	INT IDENTITY PRIMARY KEY, <br />		PackingItem		VARCHAR(50), <br />		Destination		VARCHAR(50)<br />	)<br />	GO</pre><br /><br /><p>&#160;</p><br /><br /><p>Let’s say you have a list of values:</p><br /><br /><pre class="brush:sql">Shoes<br />Camera<br />Laptop<br />Wallet</pre><br /><br /><p>The list is short for brevity but let&#8217;s say you want to insert them all into your table for a destination called //Build/. You know the syntax for an INSERT but it&#8217;s a bit of a nuisance to type over and over again. One thing you can do is to use a regular expression to match and then reference the results of your match in a replace. Over on nRegex, we&#8217;d paste in our list of items into the main text area and then use the regular expression (.+) to match each item, line by line. Because the items are matched into a group with your parenthesis, you can now write something like the following for your replace: </p><br /><br /><pre class="brush:sql">INSERT INTO PackingList VALUES('$1', '//Build/')</pre><br /><br /><p>And voila! You now just have to copy the results: </p><br /><br /><pre class="brush:sql">INSERT INTO PackingList VALUES('Shoes', '//Build/')<br />INSERT INTO PackingList VALUES('Camera', '//Build/')<br />INSERT INTO PackingList VALUES('Laptop', '//Build/')<br />INSERT INTO PackingList VALUES('Wallet', '//Build/')</pre><br /><img style="border-bottom: gray 1px solid; border-left: gray 1px solid; border-top: gray 1px solid; border-right: gray 1px solid" src="http://www.t3rse.com/meta_images/GeneratingCode1.jpg" /> <br /><br /><p>But that&#8217;s just a tip of the iceberg. There&#8217;s a lot more nifty regular expressions tricks for working with code. Here&#8217;s another one I run into quite often. Let&#8217;s say I have some code that looks like this:</p><br /><br /><pre class="brush:csharp">  rs[&quot;foo&quot;] = myFoo;<br />  rs[&quot;bar&quot;] = myBar;</pre><br /><br /><p>I want to swap what&#8217;s on either side of the equals sign to do the opposite type of assignment. Here&#8217;s my regular expression: </p><br /><br /><pre class="brush:pl">(.+)\s=\s(.+);</pre><br /><br /><p>And my replacement expression</p><br /><br /><pre class="brush:pl">$2 = $1;</pre><br /><br /><p>Et voila aussi! You can now copy the swapped values to wherever they need to go. </p><br /><img style="border-bottom: gray 1px solid; border-left: gray 1px solid; border-top: gray 1px solid; border-right: gray 1px solid" src="http://www.t3rse.com/meta_images/GeneratingCode2.jpg" /> <br /><br /><p>One final thing: any place that offers you regular expressions you can use these techniques. There are some subtle differences but as long as you have a conceptual understanding of what your goal is it&#8217;s quite easy to bend to the flavor of regular expressions presented. For example, if you are using Notepad++ and want to accomplish the same thing, you reference your groups with a leading backslash rather than the &quot;$&quot; character - in our first example you would use the following:</p><br /><br /><pre class="brush:sql">INSERT INTO PackingList VALUES('\1', '//Build/')</pre><br /><br /><p>This is, of course, just scratching the surface. It’s not that hard though! Once you learn the meaning of things like ^ or $ then you can manipulate strings in all sorts of ways that may have once not seemed possible. The best way to learn regular expressions hasn’t changed for many years. The two canonical books I always refer to are <a href="http://oreilly.com/catalog/9780596528126/index.html">Mastering Regular Expressions</a> by <a href="http://regex.info/blog/">Jeffrey Friedl</a> and the <a href="http://oreilly.com/catalog/9780596520694">Regular Expressions Cookbook</a> by Goyvaerts and Levithan. </p><br /><br /><table><tbody><br />    <tr><br />      <td><a href="http://oreilly.com/catalog/9780596528126/index.html"><img src="http://www.t3rse.com/meta_images/Mastering Regular Expressions.gif" /></a></td><br /><br />      <td><a href="http://oreilly.com/catalog/9780596520694"><img src="http://www.t3rse.com/meta_images/Regular Expressions Cookbook.gif" /></a></td><br />    </tr><br />  </tbody></table><br /><br /><p>&#160;</p><br /><br /><p>Although nRegex will allow you to hobble by I also recommend <a href="http://www.regexbuddy.com/">RegexBuddy</a>. <a href="http://www.rexv.org">Rexv</a> (which inspired nRegex) is a good tool though the Regular Expression engine is not .NET.</p><br /><br /><p>Last thing: do you have any nifty regex to code generation tricks you use on a regular basis? The audience of one you have in this space would love to learn them. </p><br /><br /><h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Features]]></title>
    <link href="http://t3rse.github.io/2011/06/15/on-features/"/>
    <updated>2011-06-15T00:05:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/15/on-features</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <blockquote>   <p style="line-height: 160%; font-size: 3em">“More features isn’t [sic] better. More features is unfocused. More features means you’ll do them worse. More features means you probably don’t have any differentiation. If you’re doing a startup, you should have <em>less </em>[sic] features than your competitors. If you have more features, you’re probably doing it wrong.”</p> </blockquote>  <p>Nugget from <a href="http://poorbuthappy.com/ease/archives/2011/06/12/4875/more-features-competitive-advantage-for-a-startup">Peter Van Dijck</a>. So the question is: when do you add a new feature? Joel Spolsky (who has written about most interesting things already, way back in the day (although it would be interesting to hear if things are still done the same in the present day FogCreek) ) <a href="http://www.joelonsoftware.com/articles/SetYourPriorities.html">wrote</a> about how they decided on new features by prioritizing and voting as a group. </p>  <p>As <a href="http://www.t3rse.com">a developer of one</a> I’m interested in techniques on deciding what to put on a roadmap and how to prioritize features. Any insight? </p>  <h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Closures, Anonymous: JavaScript Influenced C#]]></title>
    <link href="http://t3rse.github.io/2011/06/13/closures-anonymous-javascript/"/>
    <updated>2011-06-13T08:12:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/13/closures-anonymous-javascript</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <p>I’ve taken knocks in the past because of my penchant for closures and lambdas. Syntactically they never looked that strange to me and most of the time when I used them it was because it made more sense to get a sense of the flow of how things were assigned. I thought: this feels so natural, what makes it so different from some of the people I’m around using C#? Here’s an example of how I’d approach something: in the constructor, assign a loading handler, in that handler, assign a click handler, and rather than putting it in some separate method where I’d have to scroll or look elsewhere, just place it here: </p>  <pre class="brush:csharp">        public MainPage()<br />        {<br />            InitializeComponent();<br /><br />            this.Loaded += (o, e) =&gt; <br />            {<br />                myButton.Click += (_, e2) =&gt;<br />                {<br />                    myText.Text = &quot;Hello World&quot;;<br />                };<br />            };<br />        }</pre><br /><br /><p>But then the other day I was tinkering with KnockoutJS, writing some Javascript with jquery and it dawned on my why I approach things the way I do. </p><br /><br /><pre class="brush:js">        $(document).ready(function () {<br />            $('#myButton').click(function () {<br />                $('#myLabel').text('Hello World');<br />            });<br />        });</pre><br /><br /><p>It&#8217;s always interesting to make that connection more formally than trying to explain why my approach would be “better.” The advantage of being able to use a closure with the above approach has always been the main rational I’ve given when forced to come up with an answer. </p><br /><br /><h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Random Rows, Random Numbers With Sql Server]]></title>
    <link href="http://t3rse.github.io/2011/06/10/getting-random-rows-random-numbers-with/"/>
    <updated>2011-06-10T08:05:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/10/getting-random-rows-random-numbers-with</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <p>The 5 second version of this, should you arrive via search, is that to get random rows, simply use an TOP query with&#160; <strong><em>ORDER BY NewId()</em></strong> expression. It’s really that simple! Take a look: </p>  <pre class="brush:sql">-- SAMPLE TABLE<br />CREATE TABLE Keywords(<br />	KeywordId INT IDENTITY(1,1) PRIMARY KEY, <br />	KeywordValue VARCHAR(50)<br />)<br />GO<br /><br />-- SAMPLE DATA<br />DECLARE @N INT<br />SET @N = 1<br />WHILE @N &lt; 101 BEGIN<br />	INSERT INTO Keywords(KeywordValue)<br />		VALUES('key word ' + CONVERT(VARCHAR(5), @N))<br />	SET @N = @N + 1<br />END<br /><br />-- A TOP QUERY WITH ORDER BY NEWID()<br />SELECT TOP 5 * FROM Keywords ORDER BY NEWID()</pre><br /><br /><p>The longer version of this is that I recently was asked to generate random keywords for a website I was working on with a lookup table. Getting random numbers in TSQL is easy, the RAND() function does all the magic but getting rows is a lot more tricky, especially if you want to make sure you exclude anything you’ve previously retrieved. The above technique worked quite well and made it easy to allow for them to add and remove keywords on demand. </p><br /><br /><p>One interesting application of this is that you can combine it with RAND() to get random numbers via multiplier and random rows (RAND gets a random between 0 and 1 leaving you the responsibility to multiply it to control the range you want). </p><br /><br /><p>Here is where I thought this could be taken as a flexible way to get random numbers within a bounded range: </p><br /><br /><pre class="brush:sql">-- get a series of random numbers<br />SELECT TOP 5 Rand() * KeywordId FROM Keywords ORDER BY NEWID()</pre><br /><br /><p>There’s a lot of flexibility but SQL Server makes it trivial.&#160; </p><br /><br /><h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silverlight Is Dead…]]></title>
    <link href="http://t3rse.github.io/2011/06/08/silverlight-is-dead/"/>
    <updated>2011-06-08T23:59:00-05:00</updated>
    <id>http://t3rse.github.io/2011/06/08/silverlight-is-dead</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <p>… a title which I hope brings massive attention to this blog and to this rant against those that are rabid in their attacks on Microsoft and the Silverlight platform. </p>  <p>First and foremost: Silverlight 5 has yet to be released. How can the platform be “dead” if we’re on the verge of a new version? </p>  <p>Secondly: Spend some time listening to <a href="http://wildermuth.com/2010/12/12/The_Next_Application_Platform_All_of_them">MVPs</a> and <a href="http://www.hanselman.com/blog/ShouldIUseHTML5OrSilverlightOneMansOpinion.aspx">Microsoft</a> <a href="http://jesseliberty.com/2011/05/16/yet-another-podcast-35silverlight-html5-and-developers/">people</a>. Even though there is this awkward gag order until <a href="http://www.buildwindows.com/">//Build/</a> it seems quite obvious that the platform will continue to be a viable option for developers.</p>  <p>Third: HTML5 is no panacea. Spend a few days looking into the different specifications and the <a href="http://findmebyip.com/#target-selector">varied support</a> by browsers and platforms. It will become obvious that the W3C is being true to their word when they say <a href="http://www.w3.org/2011/02/htmlwg-pr.html">it won’t be “finished” for a while</a>.</p>  <p>Fourth: Grow Up. Yes you’ve made this enormous investment in Silverlight or WPF. I have too; the last 3 years of my life have been in the trenches and my employer took a calculated risk to do a significant amount of work in Silverlight. Does that mean that every rumor should shake you to the very foundation and cause emotional outbursts at being abandoned? Stay the course. When you have real information from Microsoft directly <strong>then</strong> you can have your break down if it’s not what you expected. I don’t consider my time wasted no matter what the case. I can take my knowledge of MVVM <a href="http://knockoutjs.com/">elsewhere</a>. I know a lot more than I used to about asynchronous programming. </p>  <p>Fifth: Let’s just say it’s true. Does it still warrant all that drama? You’ll be fine. People are dying in wars, unrest, and natural disasters all over the place but guess what? If you’re a Silverlight Dev and They all of a sudden remove the Silverlight Project Template from your Visual Studio and run a secret binary on your local machine to destroy the plugin removing all evidence of its existence globally you’ll still be alive. You’ll still dust off your trousers and either port your work or begin new and fanciful things in a platform that you find available. </p>  <p>Sixth: Try to make a distinction between people who are vocal versus people who are actually building software. I’m aware of a project right now where I work that makes heavy use of COM. Yeah that “not dead but done” COM. People who build things usually have their heads down creating value. I know there are a lot of talking heads online, especially talkers unsympathetic to the “evil” b0rg in Redmond, but there’s a lot of noise for very little signal. It’s cool that people get passionate (I’m being passionate myself now too) but sometimes it’s a good thing to take a step back and survey the landscape of what is real and what is bluster.</p>  <p>I’ve already admitted I could be wrong. But as significant a decision Microsoft has potential to make, my approach is to take it in stride, try to learn as much as I can and be flexible since in the tech world, no matter who you are, change is inevitable. For some of us change, with all the concomitant turbulence, is fun.</p>  <h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy Pi Day!]]></title>
    <link href="http://t3rse.github.io/2011/03/14/happy-pi-day/"/>
    <updated>2011-03-14T23:29:00-05:00</updated>
    <id>http://t3rse.github.io/2011/03/14/happy-pi-day</id>
    <content type="html"><![CDATA[<div class='post'>
<h2><font color="#0000ff">{</font></h2>  <pre style="padding-bottom: 10px; line-height: 120%; margin: 1em 0px; padding-left: 10px; padding-right: 10px; font-family: courier; background: #000; color: #eee; font-size: 10pt; overflow: auto; padding-top: 10px">class Program<br />{<br /><br />       static double PI(int i, int limit)<br />       {<br />               return (i &gt; limit)? 1 : (1 + i / (2.0 * i + 1) * PI(i + 1, limit));<br />       }<br /><br />       static void Main(string[] args)<br />       {<br />               double pi = 2 * PI(1, 2011);<br />               Console.WriteLine(pi);<br />               Console.WriteLine(&quot;Happy pi day!&quot;);<br />               Console.ReadLine();<br />       }<br />}</pre><br /><br /><h2><font color="#0000ff">}</font></h2>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primes, Sums of Primes, 2011 in C#]]></title>
    <link href="http://t3rse.github.io/2011/01/29/primes-sums-of-primes-2011-in-c/"/>
    <updated>2011-01-29T21:07:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/29/primes-sums-of-primes-2011-in-c</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>I had no idea: </p>  <p><font size="5">2011 = 157 + 163 + 167 + 173 + 179 + 181 + 191 + 193 + 197 + 199 + 211</font></p>  <p>After learning that not only was 2011 was prime, but that it was the sum of consecutive primes, I sought to write some C# code that would demonstrate this. I wrote it in a functional style, meaning at some point to port it to F# – you&#8217;ll recognize my in a forthcoming post on computing primes with F# which is actually an implementation of the algorithm I first worked through in the below C#. </p>  <pre style="padding-bottom: 10px; line-height: 120%; margin: 1em 0px; padding-left: 10px; padding-right: 10px; font-family: courier; background: #000; color: #eee; font-size: 8pt; overflow: auto; padding-top: 10px">Func&lt;long[], IEnumerable&lt;KeyValuePair&lt;long, string&gt;&gt;&gt; GenerateConsecutivePrimeSums = (primes) =&gt;<br />{<br />	List&lt;KeyValuePair&lt;long, string&gt;&gt; primeSums = new List&lt;KeyValuePair&lt;long, string&gt;&gt;();<br />	for (int i = 0; i &lt; primes.Count(); i++) <br />	{<br />		List&lt;string&gt; operands = new List&lt;string&gt;();<br />		long primeSum = primes[i];<br />		operands.Add(primeSum.ToString());<br />		for (int j = i + 1; j &lt; primes.Count(); j++) <br />		{<br />			primeSum += primes[j];<br />			operands.Add(primes[j].ToString());<br />			if (!primeSums.Any(ps =&gt; ps.Key == primeSum) &amp;&amp; primes.Contains(primeSum))<br />			{<br />				primeSums.Add(new KeyValuePair&lt;long, string&gt;(primeSum, String.Join(&quot; + &quot;, operands.ToArray())));<br />			}<br />		}                <br />	}<br /><br />	return primeSums;<br />};<br /><br />Action primesAndSums = () =&gt; { <br />	// generate primes up to 2020<br />	var primes = GeneratePrimes(2020);<br />	// generate arrays of consecutive primes that add up to prime<br />	var primesSummed = GenerateConsecutivePrimeSums(primes.OrderBy(a =&gt; a).ToArray());<br />	// go through the summed primes (dictionary of prime as key, added numbers as value)<br />	// Console.WriteLine formatted results<br />	primesSummed<br />		.OrderBy(ps =&gt; ps.Key)<br />		.ToList()<br />		.ForEach(ps =&gt; Console.WriteLine(ps.Key + &quot; = &quot; + ps.Value));<br />};<br /><br />primesAndSums();</pre><br /><br /><p>&#160;</p><br /><br /><p>The code actually calculates sums of the primes it generates, <a href="http://www.t3rse.com/metadeveloper/primesAndSums.txt">click here</a> for all the other primes which are sums of consecutive primes up to 2020: </p><br /><br /><h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interesting Data Points From How Facebook Ships Code]]></title>
    <link href="http://t3rse.github.io/2011/01/24/interesting-data-points-from-how/"/>
    <updated>2011-01-24T23:57:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/24/interesting-data-points-from-how</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>I ran across <a href="http://framethink.wordpress.com/2011/01/17/how-facebook-ships-code/">this blog entry</a> which is an unofficial attempt by somoene to glean the internal workings of Facebook’s product and software development processes. There are some very interesting things to be noted, most of which I’ll just quote from the article directly: </p>  <blockquote>   <p>“resourcing for projects is purely voluntary”</p> </blockquote>  <p>It’s interesting from this unofficial post that project dynamics are organic and based on what engineers want to work on. It begs the question of how the more difficult and less pleasing problems are solved but I would hedge that by having people who are talented and motivated, difficult and more grimy problems might be what attract people that are always seeking challenges. Indeed, from later in the article: “<em>engineers generally want to work on infrastructure, scalability and “hard problems” — that’s where all the prestige is.</em>”.</p>  <blockquote>   <p>“Engineers handle entire feature themselves — front end javascript, backend database code, and everything in between.&#160; If they want help from a Designer (there are a limited staff of dedicated designers available), they need to get a Designer interested enough in their project to take it on.&#160; Same for Architect help.&#160; But in general, expectation is that engineers will handle everything they need themselves.”</p> </blockquote>  <p>This is one of the more fascinating points because it reflects one side of an approach to programming that I’ve encountered: that delivering some functionality is a process of ownership where a person generalizes across disciplines and technologies. The opposing viewpoint sees programming more in terms of division of labor with staff assigned to “tiers” of the technological back end: database developers, “business layer” or component programmers, user interface and so on. I always think of sports with this dichotomy where the former thinks of software development like basketball – a game that involves some specialization but really rewards the generalist who can play any role on a team, and football – a game of specialists where it’s a liability to do too many things since even the physique is developed on a per position basis. </p>  <p>Many people acknowledge generalists for small organization but it appears that Facebook, a company as large as they come, prefers them. </p>  <blockquote>   <p>“engineers responsible for testing, bug fixes, and post-launch maintenance of their own work.&#160; there are some unit-testing and integration-testing frameworks available, but only sporadically used.”</p> </blockquote>  <p>There are a few edits and comments to this point but the reason I find it interesting is that they are a corollary to the views that Joel Spolsky expressed on the StackOverflow podcast. Many developers, myself included, berate ourselves on a lack of unit testing with the assumption that “everyone is doing it, why can’t I?” As time passes, however, I realize that TDD and Unit Testing are very important but not essential. It’s a very unpopular opinion and while I admit that I strive to make my code testable and, especially on personal projects where I have enough control, architect my software so that it’s testable from the get-go. </p>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning F# With FizzBuzz: Match]]></title>
    <link href="http://t3rse.github.io/2011/01/22/learning-f-with-fizzbuzz-match/"/>
    <updated>2011-01-22T23:40:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/22/learning-f-with-fizzbuzz-match</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>I had previously done <a href="http://metadeveloper.blogspot.com/2011/01/learning-f-with-fizzbuzz.html">a solution</a> for FizzBuzz in F# (from a long time ago) but now that I’m more familiar with the idioms of F# I tend more towards pattern matching instead of if/else logic for quite a few scenarios. Here is an example of my rewriting what could otherwise been a conditional if/else checking for factors of 3 and 5, but using a pattern match instead. </p>    <pre style="padding-bottom: 10px; line-height: 120%; margin: 1em 0px; padding-left: 10px; padding-right: 10px; font-family: courier; background: #000; color: #eee; font-size: 10pt; overflow: auto; padding-top: 10px">#light <br />let fizz num = <br />    match (num % 3 = 0) with <br />    | true -&gt; &quot;fizz&quot;<br />    | false -&gt; &quot;&quot;<br /><br />let buzz num = <br />    match (num % 5 = 0) with <br />    | true -&gt; &quot;buzz&quot;<br />    | false -&gt; &quot;&quot;<br /><br />let outform num fizCalc = <br />    match fizCalc.ToString().Length = 0 with<br />    | true -&gt; num.ToString()<br />    | false -&gt; fizCalc<br /><br />let rec printer nums =<br />    match nums with<br />    | [] -&gt; printfn &quot;-&quot;<br />    | h::t -&gt;         <br />        printfn &quot;%s&quot; (outform h ((fizz h) + (buzz h)))<br />        printer t<br /><br />let numbers = [1..100]<br />printer numbers</pre><br /><br /><br /><br /><p>Although I read claims that if/else conditional operations are more readable, I think the pattern match used consistently across scenarios above makes for something I find quite readable.</p><br /><br /><h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Leadership]]></title>
    <link href="http://t3rse.github.io/2011/01/21/on-leadership/"/>
    <updated>2011-01-21T00:08:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/21/on-leadership</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <blockquote>   <p style="line-height: 140%; font-size: 2em">“If you want to build a ship, don’t drum up people to gather wood, divide the work, and give them orders. Instead, teach them to yearn for the vast and endless sea”</p>    <p>- Antoine De Saint-Exupery, author of &quot;The Little Prince&quot;</p> </blockquote>  <p>Originally <a href="http://www.sellsbrothers.com/Posts/Details/12688">posted</a> on Chris Sells’s blog but worth some thought. </p>  <h3><font color="#0000ff">}</font></h3>  </div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>David Seruyange</div>
<div class='content'>
Awesome you&#39;re still out there! I&#39;d thought my soliloquy here was all but forgotten&#8230;</div>
</div>
<div class='comment'>
<div class='author'>AJ</div>
<div class='content'>
Love that, thanks dude!</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download .NET Source Code]]></title>
    <link href="http://t3rse.github.io/2011/01/19/download-net-source-code/"/>
    <updated>2011-01-19T22:53:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/19/download-net-source-code</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>I’ve been having <a href="http://stackoverflow.com/questions/4742143/calculating-text-wrapping-in-the-net-drawingcontext-drawtext-method">a problem</a> that warrants looking at the source which can be downloaded right <a href="http://referencesource.microsoft.com/netframework.aspx">here</a>. </p>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning F# With FizzBuzz]]></title>
    <link href="http://t3rse.github.io/2011/01/19/learning-f-with-fizzbuzz/"/>
    <updated>2011-01-19T07:53:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/19/learning-f-with-fizzbuzz</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>Eons ago <a href="http://metadeveloper.blogspot.com/2009/09/fizzbuzz-functional.html">I&#8217;d posted</a> on how I’d rewritten how I would solve FizzBuzz to have a more functional style (<a href="http://metadeveloper.blogspot.com/2007/03/fizbuzz-conundrum-ramanujan.html">here</a> is an imperative version), inspired by Tomas Petricek and John Skeet’s <a href="http://www.manning.com/petricek/">Functional Programming for the Real World</a>. Shortly thereafter I had written a version in F#, I’m not sure what prevented me from posting it but here it is: </p>  <pre style="padding-bottom: 10px; line-height: 120%; margin: 1em 0px; padding-left: 10px; padding-right: 10px; font-family: courier; background: #000; color: #eee; font-size: 12pt; overflow: auto; padding-top: 10px">let numbers = [1..100]<br />let fizz num = <br />    let res = if (num % 3 = 0) then &quot;fizz&quot; else &quot;&quot;<br />    res<br /><br />let buzz num = <br />    let res = if (num % 5 = 0) then &quot;buzz&quot; else &quot;&quot;<br />    res<br /><br />let outform num fizCalc = <br />    let res = if(fizCalc.ToString().Length &gt; 0) then fizCalc.ToString() else num.ToString()<br />    res<br /><br />let rec printer nums =<br />    match nums with<br />    | [] -&gt; printfn &quot;-&quot;<br />    | h::t -&gt;         <br />        printfn &quot;%s&quot; (outform h ((fizz h) + (buzz h)))<br />        printer t<br /><br />printer numbers</pre><br /><br /><p>I can already see now areas that are still influenced by the C# - most notably the use of <strong>if</strong> rather than using match for everything. I will clean it up, hopefully demonstrating an increased facility with F#. If you are looking at the above and know F#, what are some idioms or language constructs that I am neglecting in the above code? Type annotations for one&#8230; what else? </p><br /><br /><h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Diet Planning – Newsletters]]></title>
    <link href="http://t3rse.github.io/2011/01/02/information-diet-planning-newsletters/"/>
    <updated>2011-01-02T13:55:00-06:00</updated>
    <id>http://t3rse.github.io/2011/01/02/information-diet-planning-newsletters</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>Given the amount of information that is out there it’s difficult to throttle back and actually digest it. A quick look at any web page will set that context; hit StackOverflow and you’ve got several dozens of links to follow, each a rabbit hole on its own. The same can be said for Hacker News, Channel 9, and just about every other popular developer site that is out there. </p>  <p>What tools exist to process this more efficiently? Perhaps, I hope, one of the oldest tools out there: <strong>email</strong>.</p>  <p>I came across this solution reading the Washington Post’s email newsletter I subscribe to one morning. I realized I’d get more out of the news by scheduling a more deliberate reading of the newsletter than by going to the site and being bombarded by stories and links that, while no doubt interesting, would result in an overflow of words that would invariably lose their depth. </p>  <p>I decided for the next week not to visit any news site directly but rather to subscribe to several newsletters and schedule the reading from directly from my email inbox. I also turned off the radio so that rather than hearing multiple versions of syndicated stories from the Associated Press, I would be able to dive more deeply and think more at length about what I read. The goal was to buck <a href="http://www.guardian.co.uk/media/2008/jan/27/internet.pressandpublishing">the trends</a> of the modern day information seeker: </p>  <blockquote>   <p><font size="4">“characterised as being &#8216;horizontal, bouncing, checking and viewing in nature. Users are promiscuous, diverse and volatile.&#8217; &#8216;Horizontal&#8217; information-seeking means &#8216;a form of skimming activity, where people view just one or two pages from an academic site then &quot;bounce&quot; out, perhaps never to return.&#8217; The average times users spend on e-book and e-journal sites are very short: typically four and eight minutes respectively.”</font></p> </blockquote>  <p>I wanted to get more vertical with my reading rather than surfing through multiple versions of the same piece of news.</p>  <p>I was so pleased with the results that I decided to use the same strategy with technical news and articles. I have long been a member of <a href="http://www.codeproject.com/">The Code Project</a> and of the software development newsletters I receive (surprisingly few) theirs is probably the best. Each day, and then in a weekly digest, there is an email in my inbox with a decent roundup of technical articles. Although not all of them pertain to my skills set or interests, there are usually one or two good links to follow up with; in <a href="http://www.codeproject.com/script/Mailouts/View.aspx?mlid=8588">this newsletter</a> received on the last day of the year I could easily spend an hour on <a href="http://www.switched.com/2010/12/30/best-technology-writing-of-2010/">The Best Technology Writing of 2010</a> or catch up with Rob Connery giving <a href="http://blog.wekeroad.com/microsoft/hey-kid-come-over-here">his sentiments</a> on <a href="http://www.microsoft.com/bizspark/">BizSpark</a>. </p>  <p>The experiment will continue and although I do admit to “skimming” from time to time, even the tepid commitment that I’ve made seems to make my time online much more efficient. The next steps regarding newsletters is to find some more development related ones that come in a digest form, preferably weekly so that I can spend a full week on the contents. </p>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Diet Planning - Part 1]]></title>
    <link href="http://t3rse.github.io/2010/12/23/information-diet-planning-part-1/"/>
    <updated>2010-12-23T07:23:00-06:00</updated>
    <id>http://t3rse.github.io/2010/12/23/information-diet-planning-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p><strong>Goal Setting</strong></p>  <p>I’ve let it slip that one personal goal for 2011 is a more regimented information diet. I’m becoming increasingly convinced that the concepts we apply to diets on the body can be applied with some parallel applications in the world of information. </p>  <p><strong>Calorie Counting</strong></p>  <p>The first thing that applies to physical diets is the concept of tracking intake. Our bodies can utilize up to a certain amount of food after which, no matter how good it is, the food is going to be stored up as fat. Is tracking intake something that can be applied to information? The number of sites visited in a day, the number of browser tabs open, the amount of time getting pumped with information via some form of media: podcast, radio, screencast, television or otherwise? Is there a point where that additional reading does no good and takes away from what might have been retained?</p>  <p><strong>Exercise</strong></p>  <p>The second basic thing in the world of physical diets is some concomitant form of exercise. Some of this might be for burning away calories (cardio) but sometimes it’s about gaining mass or turning “fat” into “muscle.” I wonder what exercise looks like in the world of information. Steve Yegge had <a href="http://sites.google.com/site/steveyegge2/practicing-programming">an old article</a> about practice for programmers and I suspect that exercise involves designating time specifically for the mental effort related to processing information efficiently. </p>  <blockquote>   <p style="font-size: 1.5em">“The great engineers I know are as good as they are <em>because</em> they practice all the time. People in great physical shape only get that way by working out regularly, and they need to keep it up, or they get out of shape. The same goes for programming and engineering.”</p> </blockquote>  <p><strong>Media and Delivery</strong></p>  <p>There are different “food groups” associated with a healthy diet. Some types of food, like “fatty carbs” are very difficult to incorporate into any meaningful diet but others, like fruit, are a staple of most sensible dieting efforts drawn up for a healthier lifestyle. I wrote down my main sources of intake and looking at the list I would consider some blog entries analogous to fatty carbs or sugar whereas other forms of intake such as technical books to be a more substantive form of media for input and processing. </p>  <p>Confession: I’m an architecture geek<sup>1</sup>. It started in earnest when I moved to South Dakota – it was the first time I’d lived in a rural area. I missed the built environment I was used to in cities. Along the way I’ve managed to have 14 different architecture blogs in my RSS Reader. Especially since I’m not an architect, this is excessive. I usually enjoy a story here and there but I leave a lot unread. This is a case where it’s not my curiosity that needs to go away, it’s the delivery format. I’d be better served rereading Steen Eiler Rasmussen’s <a href="http://www.amazon.com/Experiencing-Architecture-Steen-Eiler-Rasmussen/dp/0262680025">Experiencing Architecture</a> or Bjarke Ingalls’s <a href="http://www.amazon.com/Yes-More-Archicomic-Architectural-Evolution/dp/3836520109/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1293108284&amp;sr=1-1">Yes Is More</a> than getting distracted by blog entries from the web. </p>  <p><strong>Processing</strong></p>  <p>I’m not sure there is any equivalent in the world of dieting but the last thing I’ve been thinking about related to my information diet is designating time for processing. Earlier this year I finally made some headway in understanding <a href="http://en.wikipedia.org/wiki/Getting_Things_Done">Getting Things Done</a> and though I can’t say I’ve implemented everything David Allen recommends two things have stuck: his recommendation of using a calendar and the idea that you process information rather than letting it idle in an indeterminate state. </p>  <p>It’s occurred to me that in recent years information access for personal and professional development is trivial. Wikipedia is a great resource for documenting general knowledge. For professional work there are websites, link aggregators, and vendors eagerly providing a glut of information to learn from. </p>  <p>In this environment, what does it mean to “process” an information resource? For example, at work this week we watched <a href="http://community.bartdesmet.net/blogs/bart/Default.aspx">Bart De Smet</a> give <a href="http://bit.ly/bfzKCk">a talk</a> on a language feature of C# called LINQ. I’ve used LINQ quite a bit but his talk covered some direction in the technology that is new (<a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx">Rx</a>). In a more general sense, he referenced the Wikipedia entry on <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">Monads</a> – another resource which I would like to process. </p>  <p>I’m not sure what processing should look like but it seems like what it means to process an information resource is less of an issue than the discipline it takes to designate time for it. Perhaps that ties this notion back to exercise. </p>  <p><strong>Conclusion</strong></p>  <p>I’ll be using the next couple of weeks to think more about what an Information Diet should look like and a practical structure to use. I’m posting in part because I would love any input on tactics and also because committing this to the permanence of my blog means the commitment is formalized. Four areas of focus will be: </p>  <ul>   <li>Calorie Counting – tracking input</li>    <li>Exercise – deliberate practice </li>    <li>Media and Delivery – determining which formats and timing work best for information</li>    <li>Processing – what steps are involved in making meaning out of information</li> </ul>  <h3><font color="#0000ff">}</font></h3>  <p><sup>1</sup>A running joke with my wife is that I will quit my job, enroll in an architecture program just so I can be a <a href="http://en.wikipedia.org/wiki/Paul_Goldberger">critic</a>. She takes great joy in laughing about this.</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language, Programming, Quirks, Conviction; Derek Sivers at RailsConf]]></title>
    <link href="http://t3rse.github.io/2010/12/20/language-programming-quirks-conviction/"/>
    <updated>2010-12-20T07:42:00-06:00</updated>
    <id>http://t3rse.github.io/2010/12/20/language-programming-quirks-conviction</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <blockquote>   <p><font size="6">“</font></p>    <p>Imagine that you are standing on a street, and you are in America, and a Japanese guy comes up to you and says “Excuse me… what is the name of this block?” </p>    <p>And you say “well, I don’t understand… there’s Oak street and there’s Elm street, this is 27<sup>th</sup> street and that’s 26<sup>th</sup>…”</p>    <p>And he says: “Yes but what is the name of this block?”</p>    <p>You say: “I don’t understand what you mean; blocks don’t have names, streets have names. Blocks are just the unnamed spaces in between the streets.”</p>    <p>He looks a little disappointed and leaves.</p>    <p>… </p>    <p>So now imagine that you are standing in Tokyo one day and you’re a little lost and you turn to somebody next to you and you say “Excuse me, what is the name of this street?”</p>    <p>And they say, “That is block 17 and that is block 16.”</p>    <p>And you say “Yeah, but what is the name of this street?”</p>    <p>And they say, “Streets don’t have names; that’s just the space between blocks 16 and 17.”</p>    <p><font size="6">”</font></p> </blockquote>  <p>A great talk from <a href="http://sivers.org/blog">Derek Sivers</a> given at RailsConf earlier this year <a href="http://itc.conversationsnetwork.org/shows/detail4565.html">available on IT Conversations</a>.</p>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Future Is Balkanized]]></title>
    <link href="http://t3rse.github.io/2010/12/19/future-is-balkanized/"/>
    <updated>2010-12-19T12:51:00-06:00</updated>
    <id>http://t3rse.github.io/2010/12/19/future-is-balkanized</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <blockquote>   <p><font size="5">“I like HTML5, but I think you&#8217;re duct taping a horn on a horse and hoping it will become a unicorn.”</font></p> </blockquote>  <p>Shawn Wildermuth hit the nail on the head with a recent analysis entitled “<a href="http://wildermuth.com/2010/12/12/The_Next_Application_Platform_All_of_them">The Next Application Platform? All of them&#8230;</a> ” It would be interesting to see how many more hits the article would have gotten with a title like “XYZ is dead” or “The Death of XYZ,” perhaps something along the lines of “The Death of the One Stop platform.” </p>  <p>A basic summary is that he points to a future in which developers tangle themselves with the following development targets:</p>  <ul>   <li>An HTML5 solution for the web</li>    <li>Plugins to extend HTML5 as necessary</li>    <li>Desktop/Browser apps for in house/well known customers</li>    <li>Apps for mobile/tablets in Objective-C, Java, and Silverlight</li> </ul>  <p>The sentiments are corroborated by my own experience, most recently even with a potential customer who wanted to have an iPad friendly application (native) but also wanted to support web based users who had no such device. If I could translate the request, it could simply be that they want things in the best possible experience for each of the disparate platforms for which they had users. Of course the smart phone was no exception. </p>  <p>In a world like this, what could the future portend but that we will have multiple platforms, no singular delivery, and a constantly increasing need to build things quickly, portably? </p>  <p>I’ve cited the article quite a bit but over the years I’ve always gone back to Jonathan Edwards <a href="http://alarmingdevelopment.org/?p=79">article</a> on Beautiful Code: </p>  <blockquote>   <p>“I wish someone had instead warned me that programming is a desperate losing battle against the unconquerable complexity of code, and the treachery of requirements.”</p> </blockquote>  <p>Although Edwards was talking more specifically about code, all of my experience points towards this truth in the realms of the disparate platforms, specifically that getting something to work in a “real world” where people use different operating systems, browsers, displays, and connectivity paradigms. Over the years there have been different tactics in trying to solve the problem: <a href="http://www.webstandards.org/">web standards</a>, ActiveX controls, Java, plugins, and of course the latest new craze, HTML5. It’s not that these tactics (and the technologies related to them) are bad: I still advocate web standards to a point, I still have my day job programming Silverlight. It’s just that the pragmatist in me thinks this is the Arab-Israeli conflict in software: no perfect solution no matter how badly its desired by those in each of the platform camps. </p>  <p>The big insight for me as a developer is this line:</p>  <blockquote>   <p>“<strong>This means as a developer you&#8217;ll need to expand what you know and learn more platforms. Is that bad or good?&#160; Both. It means more work for all of us, but it does mean you&#8217;ll need to less focus on silo&#8217;s of platforms and use your knowledge across these platforms.</strong>”</p> </blockquote>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Calendars for Developers]]></title>
    <link href="http://t3rse.github.io/2010/12/13/advent-calendars-for-developers/"/>
    <updated>2010-12-13T22:56:00-06:00</updated>
    <id>http://t3rse.github.io/2010/12/13/advent-calendars-for-developers</id>
    <content type="html"><![CDATA[<div class='post'>
<h2>{</h2>  <p>Since my days <strong><em><a href="http://metadeveloper.blogspot.com/2007/02/language-and-thinking.html">trying to hack up some Perl</a></em></strong><sup>1</sup> I was charmed by the idea of a developer’s advent calendar: a day by day lead up to Christmas with articles pertaining to a specific topic. I’m otherwise a scrooge during the holiday time; not given to commercialism, Christmas music, and other seasonal rituals. </p>  <p>But I am up for the both the <a href="http://perladvent.pm.org/2010/">Perl Advent Calendar</a> and the <a href="http://advent.rjbs.manxome.org/2010/">RJBS (Perl) Advent Calendar</a>. On a similar vein, <a href="http://sysadvent.blogspot.com/">Sys Advent</a>, a sys admin advent calendar should be interesting tracking too.</p>  <p>Others have riffed on the idea, most notably web developers. <a href="http://24ways.org/2010">24ways</a> is a seasonal advent project that I’ve tuned into each year – I usually have at least one or two of the posts stick. </p>  <p>Finally, there is an entrepreneurial advent calendar, <a href="http://24waystostart.com/2010/">24waystostart</a>. A lot of good things in there, I feel the onset of holiday good cheer. </p>  <p>I’m disappointed not to find a .NET Advent calendar (or even a Python one!). If you know of a good advent calendar, developer or otherwise, feel free to share. A few good articles can make the season pleasurable, even for a grinch like me. </p>  <h2>}</h2>  <p><sup>1</sup>Could it have been that long ago? Funny to see those old posts, but that&#8217;s part of why I blog</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serialization’s “Pit of Success” With C# and JSON]]></title>
    <link href="http://t3rse.github.io/2010/12/02/serializations-pit-of-success-with-c/"/>
    <updated>2010-12-02T07:36:00-06:00</updated>
    <id>http://t3rse.github.io/2010/12/02/serializations-pit-of-success-with-c</id>
    <content type="html"><![CDATA[<div class='post'>
<h3><font color="#0000ff">{</font></h3>  <p>Although it’s been mentioned before here, it bears repeating that before you find yourself making a reference to the <a href="http://msdn.microsoft.com/en-us/library/bb410770.aspx">DataContractJsonSerializer</a>, you ought to consider and indeed are more likely better off with the NewtonSoft library <a href="http://json.codeplex.com/">Json.NET</a>. Whereas the DataContractJsonSerializer relies on giving you the flexibility of creating types and using the DataContract and DataMember attributes on them for a lot of granular control, this is burdensome with types that should naturally find themselves serializable and JSON friendly. For example, let’s say I have a Dictionary&lt;int, string&gt;; the intent of the user shouldn’t be too complicated in the serialization process. Or, if I have a class Foo with a couple of properties, and I want to serialize an IEnumerable of said class, again, the intent doesn’t require the extra use of attributes and a complexity overhead. </p>  <p>This is not to say that the DataContractJsonSerializer does not have its place; if you are leveraging WCF and choosing JSON as your serialization format, it is probably the best route to go. That said, however, I have fallen more than once into a “pit of success” with Json.NET after getting burdened with trying to use the DataContractJsonSerializer.</p>  <p>Json.NET is still quite active, the last release during the latter half of this year. <a href="http://json.codeplex.com/releases/view/50552#ReviewsAnchor">Check it out</a>.</p>  <h3><font color="#0000ff">}</font></h3>  </div>
]]></content>
  </entry>
  
</feed>
